{
  "address": "0xf5E547C683f5d72D6A463542d3e2cC13C5470D71",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "cap_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_manualMintLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockFromBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockToBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Lock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toAdd",
          "type": "address"
        }
      ],
      "name": "addAuthorized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        }
      ],
      "name": "canUnlockAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCap",
          "type": "uint256"
        }
      ],
      "name": "capUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circulatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        }
      ],
      "name": "lastUnlockBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockFromBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newLockFrom",
          "type": "uint256"
        }
      ],
      "name": "lockFromUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        }
      ],
      "name": "lockOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockToBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newLockTo",
          "type": "uint256"
        }
      ],
      "name": "lockToUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "manualMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manualMintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manualMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toRemove",
          "type": "address"
        }
      ],
      "name": "removeAuthorized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        }
      ],
      "name": "totalBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a573bc545a4ee0b17255c4a3604e355cb458961bbf139e86877b12abcd8be3c",
  "receipt": {
    "to": null,
    "from": "0x889650279Ed98118Cb11774454Ff093F4d78b9fc",
    "contractAddress": "0xf5E547C683f5d72D6A463542d3e2cC13C5470D71",
    "transactionIndex": 0,
    "gasUsed": "2528422",
    "logsBloom": "0x
    "blockHash": "0xd0bdfdc4e0998f0aa426944f3d44e9f0495c384909291c0a9ea3f408f4388314",
    "transactionHash": "0x3a573bc545a4ee0b17255c4a3604e355cb458961bbf139e86877b12abcd8be3c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 333509,
        "transactionHash": "0x3a573bc545a4ee0b17255c4a3604e355cb458961bbf139e86877b12abcd8be3c",
        "address": "0xf5E547C683f5d72D6A463542d3e2cC13C5470D71",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889650279ed98118cb11774454ff093f4d78b9fc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd0bdfdc4e0998f0aa426944f3d44e9f0495c384909291c0a9ea3f408f4388314"
      }
    ],
    "blockNumber": 333509,
    "cumulativeGasUsed": "3491972",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Kefir",
    "KEFIR",
    "500000000000000000000000000",
    "10000000000000000000000000",
    2801987,
    5270558
  ],
  "numDeployments": 1,
  "solcInputHash": "00f25360e272e2de60a12998c76a494a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_manualMintLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockFromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockToBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"canUnlockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"capUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"lastUnlockBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFromBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockFrom\",\"type\":\"uint256\"}],\"name\":\"lockFromUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"lockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockToBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockTo\",\"type\":\"uint256\"}],\"name\":\"lockToUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"totalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"cap()\":{\"details\":\"Returns the cap on the token's total supply.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"delegates(address)\":{\"params\":{\"delegator\":\"The address to get delegatee for\"}},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"getPriorVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_delegates\":{\"details\":\"A record of each accounts delegate\"}},\"version\":1},\"userdoc\":{\"events\":{\"DelegateChanged(address,address,address)\":{\"notice\":\"An event thats emitted when an account changes its delegate\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"An event thats emitted when a delegate account's vote balance changes\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"checkpoints(address,uint32)\":{\"notice\":\"A record of votes checkpoints for each account, by index\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from signatory to `delegatee`\"},\"delegates(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"mint(address,uint256)\":{\"notice\":\"Creates `_amount` token to `_to`. Must only be called by the owner (MasterBreeder).\"},\"nonces(address)\":{\"notice\":\"A record of states for signing / validating signatures\"},\"numCheckpoints(address)\":{\"notice\":\"The number of checkpoints for each account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/main/GovernanceToken.sol\":\"GovernanceToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"src/main/Authorizable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Authorizable is Ownable {\\n    mapping(address => bool) public authorized;\\n\\n    modifier onlyAuthorized() {\\n        require(authorized[msg.sender] || owner() == msg.sender);\\n        _;\\n    }\\n\\n    function addAuthorized(address _toAdd) public onlyOwner {\\n        authorized[_toAdd] = true;\\n    }\\n\\n    function removeAuthorized(address _toRemove) public onlyOwner {\\n        require(_toRemove != msg.sender);\\n        authorized[_toRemove] = false;\\n    }\\n}\",\"keccak256\":\"0xc15372825a5b752d8515abd72d54cbf8556b2b611b26e5f2b6eac9cfdba3e95f\",\"license\":\"MIT\"},\"src/main/GovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Authorizable.sol\\\";\\n\\n// The GovernanceToken\\ncontract GovernanceToken is ERC20, Ownable, Authorizable {\\n    uint256 private _cap;\\n    uint256 private _totalLock;\\n    uint256 public lockFromBlock;\\n    uint256 public lockToBlock;\\n    uint256 public manualMintLimit;\\n    uint256 public manualMinted = 0;\\n\\n    mapping(address => uint256) private _locks;\\n    mapping(address => uint256) private _lastUnlockBlock;\\n\\n    event Lock(address indexed to, uint256 value);\\n\\n    constructor(\\n      string memory _name,\\n      string memory _symbol,\\n      uint256 cap_,\\n      uint256 _manualMintLimit,\\n      uint256 _lockFromBlock,\\n      uint256 _lockToBlock\\n    ) public ERC20(_name, _symbol) {\\n        _cap = cap_;\\n        manualMintLimit = _manualMintLimit;\\n        lockFromBlock = _lockFromBlock;\\n        lockToBlock = _lockToBlock;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view returns (uint256) {\\n        return _cap;\\n    }\\n\\n    // Update the total cap - can go up or down but wont destroy previous tokens.\\n    function capUpdate(uint256 _newCap) public onlyAuthorized {\\n        _cap = _newCap;\\n    }\\n\\n    // Update the lockFromBlock\\n    function lockFromUpdate(uint256 _newLockFrom) public onlyAuthorized {\\n        lockFromBlock = _newLockFrom;\\n    }\\n\\n    // Update the lockToBlock\\n    function lockToUpdate(uint256 _newLockTo) public onlyAuthorized {\\n        lockToBlock = _newLockTo;\\n    }\\n\\n    function unlockedSupply() public view returns (uint256) {\\n        return totalSupply().sub(_totalLock);\\n    }\\n\\n    function lockedSupply() public view returns (uint256) {\\n        return totalLock();\\n    }\\n\\n    function circulatingSupply() public view returns (uint256) {\\n        return totalSupply();\\n    }\\n\\n    function totalLock() public view returns (uint256) {\\n        return _totalLock;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) {\\n            // When minting tokens\\n            require(\\n                totalSupply().add(amount) <= _cap,\\n                \\\"ERC20Capped: cap exceeded\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._transfer(sender, recipient, amount);\\n        _moveDelegates(_delegates[sender], _delegates[recipient], amount);\\n    }\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterBreeder).\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n    }\\n\\n    function manualMint(address _to, uint256 _amount) public onlyAuthorized {\\n        require(\\n            manualMinted.add(_amount) <= manualMintLimit,\\n            \\\"ERC20: sum of manualMinted and amount greater than manualMintLimit\\\"\\n        );\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n        manualMinted = manualMinted.add(_amount);\\n    }\\n\\n    function totalBalanceOf(address _holder) public view returns (uint256) {\\n        return _locks[_holder].add(balanceOf(_holder));\\n    }\\n\\n    function lockOf(address _holder) public view returns (uint256) {\\n        return _locks[_holder];\\n    }\\n\\n    function lastUnlockBlock(address _holder) public view returns (uint256) {\\n        return _lastUnlockBlock[_holder];\\n    }\\n\\n    function lock(address _holder, uint256 _amount) public onlyOwner {\\n        require(_holder != address(0), \\\"ERC20: lock to the zero address\\\");\\n        require(\\n            _amount <= balanceOf(_holder),\\n            \\\"ERC20: lock amount over balance\\\"\\n        );\\n\\n        _transfer(_holder, address(this), _amount);\\n\\n        _locks[_holder] = _locks[_holder].add(_amount);\\n        _totalLock = _totalLock.add(_amount);\\n        if (_lastUnlockBlock[_holder] < lockFromBlock) {\\n            _lastUnlockBlock[_holder] = lockFromBlock;\\n        }\\n        emit Lock(_holder, _amount);\\n    }\\n\\n    function canUnlockAmount(address _holder) public view returns (uint256) {\\n        if (block.number < lockFromBlock) {\\n            return 0;\\n        } else if (block.number >= lockToBlock) {\\n            return _locks[_holder];\\n        } else {\\n            uint256 releaseBlock = block.number.sub(_lastUnlockBlock[_holder]);\\n            uint256 numberLockBlock =\\n                lockToBlock.sub(_lastUnlockBlock[_holder]);\\n            return _locks[_holder].mul(releaseBlock).div(numberLockBlock);\\n        }\\n    }\\n\\n    function unlock() public {\\n        require(_locks[msg.sender] > 0, \\\"ERC20: cannot unlock\\\");\\n\\n        uint256 amount = canUnlockAmount(msg.sender);\\n        // just for sure\\n        if (amount > balanceOf(address(this))) {\\n            amount = balanceOf(address(this));\\n        }\\n        _transfer(address(this), msg.sender, amount);\\n        _locks[msg.sender] = _locks[msg.sender].sub(amount);\\n        _lastUnlockBlock[msg.sender] = block.number;\\n        _totalLock = _totalLock.sub(amount);\\n    }\\n\\n    // This function is for dev address migrate all balance to a multi sig address\\n    function transferAll(address _to) public {\\n        _locks[_to] = _locks[_to].add(_locks[msg.sender]);\\n\\n        if (_lastUnlockBlock[_to] < lockFromBlock) {\\n            _lastUnlockBlock[_to] = lockFromBlock;\\n        }\\n\\n        if (_lastUnlockBlock[_to] < _lastUnlockBlock[msg.sender]) {\\n            _lastUnlockBlock[_to] = _lastUnlockBlock[msg.sender];\\n        }\\n\\n        _locks[msg.sender] = 0;\\n        _lastUnlockBlock[msg.sender] = 0;\\n\\n        _transfer(msg.sender, _to, balanceOf(msg.sender));\\n    }\\n\\n    // Copied and modified from YAM code:\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\n    // Which is copied and modified from COMPOUND:\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\n\\n    /// @dev A record of each accounts delegate\\n    mapping(address => address) internal _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegator The address to get delegatee for\\n     */\\n    function delegates(address delegator) external view returns (address) {\\n        return _delegates[delegator];\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 domainSeparator =\\n            keccak256(\\n                abi.encode(\\n                    DOMAIN_TYPEHASH,\\n                    keccak256(bytes(name())),\\n                    getChainId(),\\n                    address(this)\\n                )\\n            );\\n\\n        bytes32 structHash =\\n            keccak256(\\n                abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\n            );\\n\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n            );\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(\\n            signatory != address(0),\\n            \\\"GovernanceToken::delegateBySig: invalid signature\\\"\\n        );\\n        require(\\n            nonce == nonces[signatory]++,\\n            \\\"GovernanceToken::delegateBySig: invalid nonce\\\"\\n        );\\n        require(now <= expiry, \\\"GovernanceToken::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint256) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return\\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            blockNumber < block.number,\\n            \\\"GovernanceToken::getPriorVotes: not yet determined\\\"\\n        );\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = _delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint256 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                // decrease old representative\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld =\\n                    srcRepNum > 0\\n                        ? checkpoints[srcRep][srcRepNum - 1].votes\\n                        : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                // increase new representative\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld =\\n                    dstRepNum > 0\\n                        ? checkpoints[dstRep][dstRepNum - 1].votes\\n                        : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    ) internal {\\n        uint32 blockNumber =\\n            safe32(\\n                block.number,\\n                \\\"GovernanceToken::_writeCheckpoint: block number exceeds 32 bits\\\"\\n            );\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newVotes\\n            );\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x21d5613ae6c463c7d677d0f51453f5324e44e11b33f4101b9d584e14df87f9de\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600c553480156200001657600080fd5b5060405162002cce38038062002cce833981810160405260c08110156200003c57600080fd5b81019080805160405193929190846401000000008211156200005d57600080fd5b9083019060208201858111156200007357600080fd5b82516401000000008111828201881017156200008e57600080fd5b82525081516020918201929091019080838360005b83811015620000bd578181015183820152602001620000a3565b50505050905090810190601f168015620000eb5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010f57600080fd5b9083019060208201858111156200012557600080fd5b82516401000000008111828201881017156200014057600080fd5b82525081516020918201929091019080838360005b838110156200016f57818101518382015260200162000155565b50505050905090810190601f1680156200019d5780820380516001836020036101000a031916815260200191505b50604090815260208281015191830151606084015160809094015188519396509094509187918791620001d791600391908501906200027e565b508051620001ed9060049060208401906200027e565b50506005805460ff19166012179055506000620002096200027a565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600793909355600b91909155600955600a55506200031a9050565b3390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002c157805160ff1916838001178555620002f1565b82800160010185558215620002f1579182015b82811115620002f1578251825591602001919060010190620002d4565b50620002ff92915062000303565b5090565b5b80821115620002ff576000815560010162000304565b6129a4806200032a6000396000f3fe608060405234801561001057600080fd5b50600436106103205760003560e01c80637ecebe00116101a7578063c38533c6116100ee578063e6b2fb4a11610097578063f2fde38b11610071578063f2fde38b14610955578063f85b84a41461097b578063fd3d27b81461098357610320565b8063e6b2fb4a146108f3578063e7a324dc146108fb578063f1127ed81461090357610320565b8063cf1c316a116100c8578063cf1c316a14610873578063dd62ed3e14610899578063e4c5ff46146108c757610320565b8063c38533c614610807578063c3cda52014610824578063ca5c7b911461086b57610320565b8063a3a7e7f311610150578063a9059cbb1161012a578063a9059cbb1461078f578063b4b5ea57146107bb578063b9181611146107e157610320565b8063a3a7e7f314610735578063a457c2d71461075b578063a69df4b51461078757610320565b80638e875e1a116101815780638e875e1a1461071d5780639358928b1461072557806395d89b411461072d57610320565b80637ecebe00146106c957806389a2867c146106ef5780638da5cb5b1461071557610320565b806340346c491161026b5780635c19a95c1161021457806370a08231116101ee57806370a082311461066f578063715018a614610695578063782d6fe11461069d57610320565b80635c19a95c1461060257806366fc237b146106285780636fcfff451461063057610320565b80634b0ee02a116102455780634b0ee02a14610574578063587cde1e1461059a5780635a46d3b5146105dc57610320565b806340346c491461050557806340c10f1914610522578063485d7d941461054e57610320565b806323b872dd116102cd578063355274ea116102a7578063355274ea146104c957806339509351146104d15780633a1aae35146104fd57610320565b806323b872dd14610449578063282d3fdf1461047f578063313ce567146104ab57610320565b806318160ddd116102fe57806318160ddd14610401578063202b17601461041b57806320606b701461044157610320565b806306fdde0314610325578063095ea7b3146103a25780630cb285e2146103e2575b600080fd5b61032d61098b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561036757818101518382015260200161034f565b50505050905090810190601f1680156103945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ce600480360360408110156103b857600080fd5b506001600160a01b038135169060200135610a21565b604080519115158252519081900360200190f35b6103ff600480360360208110156103f857600080fd5b5035610a3f565b005b610409610a7a565b60408051918252519081900360200190f35b6104096004803603602081101561043157600080fd5b50356001600160a01b0316610a80565b610409610b46565b6103ce6004803603606081101561045f57600080fd5b506001600160a01b03813581169160208101359091169060400135610b6a565b6103ff6004803603604081101561049557600080fd5b506001600160a01b038135169060200135610bf1565b6104b3610df6565b6040805160ff9092168252519081900360200190f35b610409610dff565b6103ce600480360360408110156104e757600080fd5b506001600160a01b038135169060200135610e05565b610409610e53565b6103ff6004803603602081101561051b57600080fd5b5035610e59565b6103ff6004803603604081101561053857600080fd5b506001600160a01b038135169060200135610e94565b6103ff6004803603602081101561056457600080fd5b50356001600160a01b0316610f3b565b6104096004803603602081101561058a57600080fd5b50356001600160a01b0316610fe6565b6105c0600480360360208110156105b057600080fd5b50356001600160a01b0316611013565b604080516001600160a01b039092168252519081900360200190f35b610409600480360360208110156105f257600080fd5b50356001600160a01b0316611031565b6103ff6004803603602081101561061857600080fd5b50356001600160a01b031661104c565b610409611059565b6106566004803603602081101561064657600080fd5b50356001600160a01b031661105f565b6040805163ffffffff9092168252519081900360200190f35b6104096004803603602081101561068557600080fd5b50356001600160a01b0316611077565b6103ff611092565b610409600480360360408110156106b357600080fd5b506001600160a01b03813516906020013561116d565b610409600480360360208110156106df57600080fd5b50356001600160a01b0316611375565b6104096004803603602081101561070557600080fd5b50356001600160a01b0316611387565b6105c06113a2565b6104096113b6565b6104096113bc565b61032d6113cb565b6103ff6004803603602081101561074b57600080fd5b50356001600160a01b031661142c565b6103ce6004803603604081101561077157600080fd5b506001600160a01b03813516906020013561151a565b6103ff611582565b6103ce600480360360408110156107a557600080fd5b506001600160a01b038135169060200135611662565b610409600480360360208110156107d157600080fd5b50356001600160a01b0316611676565b6103ce600480360360208110156107f757600080fd5b50356001600160a01b03166116da565b6103ff6004803603602081101561081d57600080fd5b50356116ef565b6103ff600480360360c081101561083a57600080fd5b506001600160a01b038135169060208101359060408101359060ff6060820135169060808101359060a0013561172a565b6104096119b8565b6103ff6004803603602081101561088957600080fd5b50356001600160a01b03166119c2565b610409600480360360408110156108af57600080fd5b506001600160a01b0381358116916020013516611a5a565b6103ff600480360360408110156108dd57600080fd5b506001600160a01b038135169060200135611a85565b610409611b4b565b610409611b51565b6109356004803603604081101561091957600080fd5b5080356001600160a01b0316906020013563ffffffff16611b75565b6040805163ffffffff909316835260208301919091528051918290030190f35b6103ff6004803603602081101561096b57600080fd5b50356001600160a01b0316611ba2565b610409611cd9565b610409611cdf565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a175780601f106109ec57610100808354040283529160200191610a17565b820191906000526020600020905b8154815290600101906020018083116109fa57829003601f168201915b5050505050905090565b6000610a35610a2e611cf5565b8484611cf9565b5060015b92915050565b3360009081526006602052604090205460ff1680610a6c575033610a616113a2565b6001600160a01b0316145b610a7557600080fd5b600a55565b60025490565b6000600954431015610a9457506000610b41565b600a544310610abc57506001600160a01b0381166000908152600d6020526040902054610b41565b6001600160a01b0382166000908152600e6020526040812054610ae0904390611de5565b6001600160a01b0384166000908152600e6020526040812054600a549293509091610b0a91611de5565b6001600160a01b0385166000908152600d6020526040902054909150610b3c908290610b369085611e42565b90611e9b565b925050505b919050565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6000610b77848484611f02565b610be784610b83611cf5565b610be2856040518060600160405280602881526020016128a8602891396001600160a01b038a16600090815260016020526040812090610bc1611cf5565b6001600160a01b031681526020810191909152604001600020549190611f44565b611cf9565b5060019392505050565b610bf9611cf5565b6001600160a01b0316610c0a6113a2565b6001600160a01b031614610c65576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038216610cc0576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206c6f636b20746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610cc982611077565b811115610d1d576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206c6f636b20616d6f756e74206f7665722062616c616e636500604482015290519081900360640190fd5b610d28823083611f02565b6001600160a01b0382166000908152600d6020526040902054610d4b9082611fdb565b6001600160a01b0383166000908152600d6020526040902055600854610d719082611fdb565b6008556009546001600160a01b0383166000908152600e60205260409020541015610db3576009546001600160a01b0383166000908152600e60205260409020555b6040805182815290516001600160a01b038416917f625fed9875dada8643f2418b838ae0bc78d9a148a18eee4ee1979ff0f3f5d427919081900360200190a25050565b60055460ff1690565b60075490565b6000610a35610e12611cf5565b84610be28560016000610e23611cf5565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611fdb565b60085490565b3360009081526006602052604090205460ff1680610e86575033610e7b6113a2565b6001600160a01b0316145b610e8f57600080fd5b600755565b610e9c611cf5565b6001600160a01b0316610ead6113a2565b6001600160a01b031614610f08576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610f128282612035565b6001600160a01b038083166000908152600f6020526040812054610f37921683612125565b5050565b610f43611cf5565b6001600160a01b0316610f546113a2565b6001600160a01b031614610faf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116331415610fc557600080fd5b6001600160a01b03166000908152600660205260409020805460ff19169055565b6000610a39610ff483611077565b6001600160a01b0384166000908152600d602052604090205490611fdb565b6001600160a01b039081166000908152600f60205260409020541690565b6001600160a01b03166000908152600d602052604090205490565b6110563382612262565b50565b60095481565b60116020526000908152604090205463ffffffff1681565b6001600160a01b031660009081526020819052604090205490565b61109a611cf5565b6001600160a01b03166110ab6113a2565b6001600160a01b031614611106576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580547fffffffffffffffffffffff0000000000000000000000000000000000000000ff169055565b60004382106111ad5760405162461bcd60e51b81526004018080602001828103825260328152602001806126e56032913960400191505060405180910390fd5b6001600160a01b03831660009081526011602052604090205463ffffffff16806111db576000915050610a39565b6001600160a01b038416600090815260106020908152604080832063ffffffff60001986018116855292529091205416831061124a576001600160a01b03841660009081526010602090815260408083206000199490940163ffffffff16835292905220600101549050610a39565b6001600160a01b038416600090815260106020908152604080832083805290915290205463ffffffff16831015611285576000915050610a39565b600060001982015b8163ffffffff168163ffffffff16111561133e57600282820363ffffffff160481036112b76126cd565b506001600160a01b038716600090815260106020908152604080832063ffffffff80861685529083529281902081518083019092528054909316808252600190930154918101919091529087141561131957602001519450610a399350505050565b805163ffffffff1687111561133057819350611337565b6001820392505b505061128d565b506001600160a01b038516600090815260106020908152604080832063ffffffff9094168352929052206001015491505092915050565b60126020526000908152604090205481565b6001600160a01b03166000908152600e602052604090205490565b60055461010090046001600160a01b031690565b600a5481565b60006113c6610a7a565b905090565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a175780601f106109ec57610100808354040283529160200191610a17565b336000908152600d6020526040808220546001600160a01b038416835291205461145591611fdb565b6001600160a01b0382166000908152600d6020908152604080832093909355600954600e9091529190205410156114a3576009546001600160a01b0382166000908152600e60205260409020555b336000908152600e6020526040808220546001600160a01b038416835291205410156114ea57336000908152600e6020526040808220546001600160a01b03841683529120555b336000818152600d60209081526040808320839055600e909152812055611056908261151582611077565b611f02565b6000610a35611527611cf5565b84610be28560405180606001604052806025815260200161294a6025913960016000611551611cf5565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611f44565b336000908152600d60205260409020546115e3576040805162461bcd60e51b815260206004820152601460248201527f45524332303a2063616e6e6f7420756e6c6f636b000000000000000000000000604482015290519081900360640190fd5b60006115ee33610a80565b90506115f930611077565b81111561160c5761160930611077565b90505b611617303383611f02565b336000908152600d60205260409020546116319082611de5565b336000908152600d6020908152604080832093909355600e90522043905560085461165c9082611de5565b60085550565b6000610a3561166f611cf5565b8484611f02565b6001600160a01b03811660009081526011602052604081205463ffffffff16806116a15760006116d3565b6001600160a01b038316600090815260106020908152604080832063ffffffff60001986011684529091529020600101545b9392505050565b60066020526000908152604090205460ff1681565b3360009081526006602052604090205460ff168061171c5750336117116113a2565b6001600160a01b0316145b61172557600080fd5b600955565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86661175561098b565b8051906020012061176461230f565b60408051602080820195909552808201939093526060830191909152306080808401919091528151808403909101815260a0830182528051908401207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08401526001600160a01b038b1660e084015261010083018a90526101208084018a905282518085039091018152610140840183528051908501207f19010000000000000000000000000000000000000000000000000000000000006101608501526101628401829052610182808501829052835180860390910181526101a285018085528151918701919091206000918290526101c2860180865281905260ff8b166101e287015261020286018a90526102228601899052935192965090949293909260019261024280840193601f198301929081900390910190855afa1580156118b2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166119045760405162461bcd60e51b81526004018080602001828103825260318152602001806128d06031913960400191505060405180910390fd5b6001600160a01b038116600090815260126020526040902080546001810190915589146119625760405162461bcd60e51b815260040180806020018281038252602d815260200180612717602d913960400191505060405180910390fd5b874211156119a15760405162461bcd60e51b81526004018080602001828103825260318152602001806128566031913960400191505060405180910390fd5b6119ab818b612262565b505050505b505050505050565b60006113c6610e53565b6119ca611cf5565b6001600160a01b03166119db6113a2565b6001600160a01b031614611a36576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3360009081526006602052604090205460ff1680611ab2575033611aa76113a2565b6001600160a01b0316145b611abb57600080fd5b600b54600c54611acb9083611fdb565b1115611b085760405162461bcd60e51b81526004018080602001828103825260428152602001806128146042913960600191505060405180910390fd5b611b128282612035565b6001600160a01b038083166000908152600f6020526040812054611b37921683612125565b600c54611b449082611fdb565b600c555050565b600c5481565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b60106020908152600092835260408084209091529082529020805460019091015463ffffffff9091169082565b611baa611cf5565b6001600160a01b0316611bbb6113a2565b6001600160a01b031614611c16576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611c5b5760405162461bcd60e51b81526004018080602001828103825260268152602001806127a66026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b600b5481565b60006113c6600854611cef610a7a565b90611de5565b3390565b6001600160a01b038316611d3e5760405162461bcd60e51b81526004018080602001828103825260248152602001806129266024913960400191505060405180910390fd5b6001600160a01b038216611d835760405162461bcd60e51b81526004018080602001828103825260228152602001806127cc6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600082821115611e3c576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082611e5157506000610a39565b82820282848281611e5e57fe5b04146116d35760405162461bcd60e51b81526004018080602001828103825260218152602001806128876021913960400191505060405180910390fd5b6000808211611ef1576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611efa57fe5b049392505050565b611f0d838383612313565b6001600160a01b038084166000908152600f6020526040808220548584168352912054611f3f92918216911683612125565b505050565b60008184841115611fd35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f98578181015183820152602001611f80565b50505050905090810190601f168015611fc55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156116d3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b038216612090576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61209c6000838361246e565b6002546120a99082611fdb565b6002556001600160a01b0382166000908152602081905260409020546120cf9082611fdb565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b816001600160a01b0316836001600160a01b0316141580156121475750600081115b15611f3f576001600160a01b038316156121d9576001600160a01b03831660009081526011602052604081205463ffffffff1690816121875760006121b9565b6001600160a01b038516600090815260106020908152604080832063ffffffff60001987011684529091529020600101545b905060006121c78285611de5565b90506121d5868484846124ef565b5050505b6001600160a01b03821615611f3f576001600160a01b03821660009081526011602052604081205463ffffffff169081612214576000612246565b6001600160a01b038416600090815260106020908152604080832063ffffffff60001987011684529091529020600101545b905060006122548285611fdb565b90506119b0858484846124ef565b6001600160a01b038083166000908152600f60205260408120549091169061228984611077565b6001600160a01b038581166000818152600f602052604080822080547fffffffffffffffffffffffff000000000000000000000000000000000000000016898616908117909155905194955093928616927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4612309828483612125565b50505050565b4690565b6001600160a01b0383166123585760405162461bcd60e51b81526004018080602001828103825260258152602001806129016025913960400191505060405180910390fd5b6001600160a01b03821661239d5760405162461bcd60e51b81526004018080602001828103825260238152602001806127446023913960400191505060405180910390fd5b6123a883838361246e565b6123e5816040518060600160405280602681526020016127ee602691396001600160a01b0386166000908152602081905260409020549190611f44565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546124149082611fdb565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b612479838383611f3f565b6001600160a01b038316611f3f5760075461249c82612496610a7a565b90611fdb565b1115611f3f576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b6000612513436040518060600160405280603f8152602001612767603f913961266f565b905060008463ffffffff1611801561255c57506001600160a01b038516600090815260106020908152604080832063ffffffff6000198901811685529252909120548282169116145b15612599576001600160a01b038516600090815260106020908152604080832063ffffffff60001989011684529091529020600101829055612625565b60408051808201825263ffffffff808416825260208083018681526001600160a01b038a166000818152601084528681208b861682528452868120955186549086167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000918216178755925160019687015590815260119092529390208054928801909116919092161790555b604080518481526020810184905281516001600160a01b038816927fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724928290030190a25050505050565b60008164010000000084106126c55760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611f98578181015183820152602001611f80565b509192915050565b60408051808201909152600080825260208201529056fe476f7665726e616e6365546f6b656e3a3a6765745072696f72566f7465733a206e6f74207965742064657465726d696e6564476f7665726e616e6365546f6b656e3a3a64656c656761746542795369673a20696e76616c6964206e6f6e636545524332303a207472616e7366657220746f20746865207a65726f2061646472657373476f7665726e616e6365546f6b656e3a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d626572206578636565647320333220626974734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a2073756d206f66206d616e75616c4d696e74656420616e6420616d6f756e742067726561746572207468616e206d616e75616c4d696e744c696d6974476f7665726e616e6365546f6b656e3a3a64656c656761746542795369673a207369676e61747572652065787069726564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365476f7665726e616e6365546f6b656e3a3a64656c656761746542795369673a20696e76616c6964207369676e617475726545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220a2a9439ed57bc936661afd5d81378681d2d8a39b370b5a2c9a87cb780fb43f5264736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103205760003560e01c80637ecebe00116101a7578063c38533c6116100ee578063e6b2fb4a11610097578063f2fde38b11610071578063f2fde38b14610955578063f85b84a41461097b578063fd3d27b81461098357610320565b8063e6b2fb4a146108f3578063e7a324dc146108fb578063f1127ed81461090357610320565b8063cf1c316a116100c8578063cf1c316a14610873578063dd62ed3e14610899578063e4c5ff46146108c757610320565b8063c38533c614610807578063c3cda52014610824578063ca5c7b911461086b57610320565b8063a3a7e7f311610150578063a9059cbb1161012a578063a9059cbb1461078f578063b4b5ea57146107bb578063b9181611146107e157610320565b8063a3a7e7f314610735578063a457c2d71461075b578063a69df4b51461078757610320565b80638e875e1a116101815780638e875e1a1461071d5780639358928b1461072557806395d89b411461072d57610320565b80637ecebe00146106c957806389a2867c146106ef5780638da5cb5b1461071557610320565b806340346c491161026b5780635c19a95c1161021457806370a08231116101ee57806370a082311461066f578063715018a614610695578063782d6fe11461069d57610320565b80635c19a95c1461060257806366fc237b146106285780636fcfff451461063057610320565b80634b0ee02a116102455780634b0ee02a14610574578063587cde1e1461059a5780635a46d3b5146105dc57610320565b806340346c491461050557806340c10f1914610522578063485d7d941461054e57610320565b806323b872dd116102cd578063355274ea116102a7578063355274ea146104c957806339509351146104d15780633a1aae35146104fd57610320565b806323b872dd14610449578063282d3fdf1461047f578063313ce567146104ab57610320565b806318160ddd116102fe57806318160ddd14610401578063202b17601461041b57806320606b701461044157610320565b806306fdde0314610325578063095ea7b3146103a25780630cb285e2146103e2575b600080fd5b61032d61098b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561036757818101518382015260200161034f565b50505050905090810190601f1680156103945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ce600480360360408110156103b857600080fd5b506001600160a01b038135169060200135610a21565b604080519115158252519081900360200190f35b6103ff600480360360208110156103f857600080fd5b5035610a3f565b005b610409610a7a565b60408051918252519081900360200190f35b6104096004803603602081101561043157600080fd5b50356001600160a01b0316610a80565b610409610b46565b6103ce6004803603606081101561045f57600080fd5b506001600160a01b03813581169160208101359091169060400135610b6a565b6103ff6004803603604081101561049557600080fd5b506001600160a01b038135169060200135610bf1565b6104b3610df6565b6040805160ff9092168252519081900360200190f35b610409610dff565b6103ce600480360360408110156104e757600080fd5b506001600160a01b038135169060200135610e05565b610409610e53565b6103ff6004803603602081101561051b57600080fd5b5035610e59565b6103ff6004803603604081101561053857600080fd5b506001600160a01b038135169060200135610e94565b6103ff6004803603602081101561056457600080fd5b50356001600160a01b0316610f3b565b6104096004803603602081101561058a57600080fd5b50356001600160a01b0316610fe6565b6105c0600480360360208110156105b057600080fd5b50356001600160a01b0316611013565b604080516001600160a01b039092168252519081900360200190f35b610409600480360360208110156105f257600080fd5b50356001600160a01b0316611031565b6103ff6004803603602081101561061857600080fd5b50356001600160a01b031661104c565b610409611059565b6106566004803603602081101561064657600080fd5b50356001600160a01b031661105f565b6040805163ffffffff9092168252519081900360200190f35b6104096004803603602081101561068557600080fd5b50356001600160a01b0316611077565b6103ff611092565b610409600480360360408110156106b357600080fd5b506001600160a01b03813516906020013561116d565b610409600480360360208110156106df57600080fd5b50356001600160a01b0316611375565b6104096004803603602081101561070557600080fd5b50356001600160a01b0316611387565b6105c06113a2565b6104096113b6565b6104096113bc565b61032d6113cb565b6103ff6004803603602081101561074b57600080fd5b50356001600160a01b031661142c565b6103ce6004803603604081101561077157600080fd5b506001600160a01b03813516906020013561151a565b6103ff611582565b6103ce600480360360408110156107a557600080fd5b506001600160a01b038135169060200135611662565b610409600480360360208110156107d157600080fd5b50356001600160a01b0316611676565b6103ce600480360360208110156107f757600080fd5b50356001600160a01b03166116da565b6103ff6004803603602081101561081d57600080fd5b50356116ef565b6103ff600480360360c081101561083a57600080fd5b506001600160a01b038135169060208101359060408101359060ff6060820135169060808101359060a0013561172a565b6104096119b8565b6103ff6004803603602081101561088957600080fd5b50356001600160a01b03166119c2565b610409600480360360408110156108af57600080fd5b506001600160a01b0381358116916020013516611a5a565b6103ff600480360360408110156108dd57600080fd5b506001600160a01b038135169060200135611a85565b610409611b4b565b610409611b51565b6109356004803603604081101561091957600080fd5b5080356001600160a01b0316906020013563ffffffff16611b75565b6040805163ffffffff909316835260208301919091528051918290030190f35b6103ff6004803603602081101561096b57600080fd5b50356001600160a01b0316611ba2565b610409611cd9565b610409611cdf565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a175780601f106109ec57610100808354040283529160200191610a17565b820191906000526020600020905b8154815290600101906020018083116109fa57829003601f168201915b5050505050905090565b6000610a35610a2e611cf5565b8484611cf9565b5060015b92915050565b3360009081526006602052604090205460ff1680610a6c575033610a616113a2565b6001600160a01b0316145b610a7557600080fd5b600a55565b60025490565b6000600954431015610a9457506000610b41565b600a544310610abc57506001600160a01b0381166000908152600d6020526040902054610b41565b6001600160a01b0382166000908152600e6020526040812054610ae0904390611de5565b6001600160a01b0384166000908152600e6020526040812054600a549293509091610b0a91611de5565b6001600160a01b0385166000908152600d6020526040902054909150610b3c908290610b369085611e42565b90611e9b565b925050505b919050565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6000610b77848484611f02565b610be784610b83611cf5565b610be2856040518060600160405280602881526020016128a8602891396001600160a01b038a16600090815260016020526040812090610bc1611cf5565b6001600160a01b031681526020810191909152604001600020549190611f44565b611cf9565b5060019392505050565b610bf9611cf5565b6001600160a01b0316610c0a6113a2565b6001600160a01b031614610c65576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038216610cc0576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206c6f636b20746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610cc982611077565b811115610d1d576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206c6f636b20616d6f756e74206f7665722062616c616e636500604482015290519081900360640190fd5b610d28823083611f02565b6001600160a01b0382166000908152600d6020526040902054610d4b9082611fdb565b6001600160a01b0383166000908152600d6020526040902055600854610d719082611fdb565b6008556009546001600160a01b0383166000908152600e60205260409020541015610db3576009546001600160a01b0383166000908152600e60205260409020555b6040805182815290516001600160a01b038416917f625fed9875dada8643f2418b838ae0bc78d9a148a18eee4ee1979ff0f3f5d427919081900360200190a25050565b60055460ff1690565b60075490565b6000610a35610e12611cf5565b84610be28560016000610e23611cf5565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611fdb565b60085490565b3360009081526006602052604090205460ff1680610e86575033610e7b6113a2565b6001600160a01b0316145b610e8f57600080fd5b600755565b610e9c611cf5565b6001600160a01b0316610ead6113a2565b6001600160a01b031614610f08576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610f128282612035565b6001600160a01b038083166000908152600f6020526040812054610f37921683612125565b5050565b610f43611cf5565b6001600160a01b0316610f546113a2565b6001600160a01b031614610faf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116331415610fc557600080fd5b6001600160a01b03166000908152600660205260409020805460ff19169055565b6000610a39610ff483611077565b6001600160a01b0384166000908152600d602052604090205490611fdb565b6001600160a01b039081166000908152600f60205260409020541690565b6001600160a01b03166000908152600d602052604090205490565b6110563382612262565b50565b60095481565b60116020526000908152604090205463ffffffff1681565b6001600160a01b031660009081526020819052604090205490565b61109a611cf5565b6001600160a01b03166110ab6113a2565b6001600160a01b031614611106576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580547fffffffffffffffffffffff0000000000000000000000000000000000000000ff169055565b60004382106111ad5760405162461bcd60e51b81526004018080602001828103825260328152602001806126e56032913960400191505060405180910390fd5b6001600160a01b03831660009081526011602052604090205463ffffffff16806111db576000915050610a39565b6001600160a01b038416600090815260106020908152604080832063ffffffff60001986018116855292529091205416831061124a576001600160a01b03841660009081526010602090815260408083206000199490940163ffffffff16835292905220600101549050610a39565b6001600160a01b038416600090815260106020908152604080832083805290915290205463ffffffff16831015611285576000915050610a39565b600060001982015b8163ffffffff168163ffffffff16111561133e57600282820363ffffffff160481036112b76126cd565b506001600160a01b038716600090815260106020908152604080832063ffffffff80861685529083529281902081518083019092528054909316808252600190930154918101919091529087141561131957602001519450610a399350505050565b805163ffffffff1687111561133057819350611337565b6001820392505b505061128d565b506001600160a01b038516600090815260106020908152604080832063ffffffff9094168352929052206001015491505092915050565b60126020526000908152604090205481565b6001600160a01b03166000908152600e602052604090205490565b60055461010090046001600160a01b031690565b600a5481565b60006113c6610a7a565b905090565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a175780601f106109ec57610100808354040283529160200191610a17565b336000908152600d6020526040808220546001600160a01b038416835291205461145591611fdb565b6001600160a01b0382166000908152600d6020908152604080832093909355600954600e9091529190205410156114a3576009546001600160a01b0382166000908152600e60205260409020555b336000908152600e6020526040808220546001600160a01b038416835291205410156114ea57336000908152600e6020526040808220546001600160a01b03841683529120555b336000818152600d60209081526040808320839055600e909152812055611056908261151582611077565b611f02565b6000610a35611527611cf5565b84610be28560405180606001604052806025815260200161294a6025913960016000611551611cf5565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611f44565b336000908152600d60205260409020546115e3576040805162461bcd60e51b815260206004820152601460248201527f45524332303a2063616e6e6f7420756e6c6f636b000000000000000000000000604482015290519081900360640190fd5b60006115ee33610a80565b90506115f930611077565b81111561160c5761160930611077565b90505b611617303383611f02565b336000908152600d60205260409020546116319082611de5565b336000908152600d6020908152604080832093909355600e90522043905560085461165c9082611de5565b60085550565b6000610a3561166f611cf5565b8484611f02565b6001600160a01b03811660009081526011602052604081205463ffffffff16806116a15760006116d3565b6001600160a01b038316600090815260106020908152604080832063ffffffff60001986011684529091529020600101545b9392505050565b60066020526000908152604090205460ff1681565b3360009081526006602052604090205460ff168061171c5750336117116113a2565b6001600160a01b0316145b61172557600080fd5b600955565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86661175561098b565b8051906020012061176461230f565b60408051602080820195909552808201939093526060830191909152306080808401919091528151808403909101815260a0830182528051908401207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08401526001600160a01b038b1660e084015261010083018a90526101208084018a905282518085039091018152610140840183528051908501207f19010000000000000000000000000000000000000000000000000000000000006101608501526101628401829052610182808501829052835180860390910181526101a285018085528151918701919091206000918290526101c2860180865281905260ff8b166101e287015261020286018a90526102228601899052935192965090949293909260019261024280840193601f198301929081900390910190855afa1580156118b2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166119045760405162461bcd60e51b81526004018080602001828103825260318152602001806128d06031913960400191505060405180910390fd5b6001600160a01b038116600090815260126020526040902080546001810190915589146119625760405162461bcd60e51b815260040180806020018281038252602d815260200180612717602d913960400191505060405180910390fd5b874211156119a15760405162461bcd60e51b81526004018080602001828103825260318152602001806128566031913960400191505060405180910390fd5b6119ab818b612262565b505050505b505050505050565b60006113c6610e53565b6119ca611cf5565b6001600160a01b03166119db6113a2565b6001600160a01b031614611a36576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3360009081526006602052604090205460ff1680611ab2575033611aa76113a2565b6001600160a01b0316145b611abb57600080fd5b600b54600c54611acb9083611fdb565b1115611b085760405162461bcd60e51b81526004018080602001828103825260428152602001806128146042913960600191505060405180910390fd5b611b128282612035565b6001600160a01b038083166000908152600f6020526040812054611b37921683612125565b600c54611b449082611fdb565b600c555050565b600c5481565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b60106020908152600092835260408084209091529082529020805460019091015463ffffffff9091169082565b611baa611cf5565b6001600160a01b0316611bbb6113a2565b6001600160a01b031614611c16576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611c5b5760405162461bcd60e51b81526004018080602001828103825260268152602001806127a66026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b600b5481565b60006113c6600854611cef610a7a565b90611de5565b3390565b6001600160a01b038316611d3e5760405162461bcd60e51b81526004018080602001828103825260248152602001806129266024913960400191505060405180910390fd5b6001600160a01b038216611d835760405162461bcd60e51b81526004018080602001828103825260228152602001806127cc6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600082821115611e3c576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082611e5157506000610a39565b82820282848281611e5e57fe5b04146116d35760405162461bcd60e51b81526004018080602001828103825260218152602001806128876021913960400191505060405180910390fd5b6000808211611ef1576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611efa57fe5b049392505050565b611f0d838383612313565b6001600160a01b038084166000908152600f6020526040808220548584168352912054611f3f92918216911683612125565b505050565b60008184841115611fd35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f98578181015183820152602001611f80565b50505050905090810190601f168015611fc55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156116d3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b038216612090576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61209c6000838361246e565b6002546120a99082611fdb565b6002556001600160a01b0382166000908152602081905260409020546120cf9082611fdb565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b816001600160a01b0316836001600160a01b0316141580156121475750600081115b15611f3f576001600160a01b038316156121d9576001600160a01b03831660009081526011602052604081205463ffffffff1690816121875760006121b9565b6001600160a01b038516600090815260106020908152604080832063ffffffff60001987011684529091529020600101545b905060006121c78285611de5565b90506121d5868484846124ef565b5050505b6001600160a01b03821615611f3f576001600160a01b03821660009081526011602052604081205463ffffffff169081612214576000612246565b6001600160a01b038416600090815260106020908152604080832063ffffffff60001987011684529091529020600101545b905060006122548285611fdb565b90506119b0858484846124ef565b6001600160a01b038083166000908152600f60205260408120549091169061228984611077565b6001600160a01b038581166000818152600f602052604080822080547fffffffffffffffffffffffff000000000000000000000000000000000000000016898616908117909155905194955093928616927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4612309828483612125565b50505050565b4690565b6001600160a01b0383166123585760405162461bcd60e51b81526004018080602001828103825260258152602001806129016025913960400191505060405180910390fd5b6001600160a01b03821661239d5760405162461bcd60e51b81526004018080602001828103825260238152602001806127446023913960400191505060405180910390fd5b6123a883838361246e565b6123e5816040518060600160405280602681526020016127ee602691396001600160a01b0386166000908152602081905260409020549190611f44565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546124149082611fdb565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b612479838383611f3f565b6001600160a01b038316611f3f5760075461249c82612496610a7a565b90611fdb565b1115611f3f576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b6000612513436040518060600160405280603f8152602001612767603f913961266f565b905060008463ffffffff1611801561255c57506001600160a01b038516600090815260106020908152604080832063ffffffff6000198901811685529252909120548282169116145b15612599576001600160a01b038516600090815260106020908152604080832063ffffffff60001989011684529091529020600101829055612625565b60408051808201825263ffffffff808416825260208083018681526001600160a01b038a166000818152601084528681208b861682528452868120955186549086167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000918216178755925160019687015590815260119092529390208054928801909116919092161790555b604080518481526020810184905281516001600160a01b038816927fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724928290030190a25050505050565b60008164010000000084106126c55760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611f98578181015183820152602001611f80565b509192915050565b60408051808201909152600080825260208201529056fe476f7665726e616e6365546f6b656e3a3a6765745072696f72566f7465733a206e6f74207965742064657465726d696e6564476f7665726e616e6365546f6b656e3a3a64656c656761746542795369673a20696e76616c6964206e6f6e636545524332303a207472616e7366657220746f20746865207a65726f2061646472657373476f7665726e616e6365546f6b656e3a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d626572206578636565647320333220626974734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a2073756d206f66206d616e75616c4d696e74656420616e6420616d6f756e742067726561746572207468616e206d616e75616c4d696e744c696d6974476f7665726e616e6365546f6b656e3a3a64656c656761746542795369673a207369676e61747572652065787069726564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365476f7665726e616e6365546f6b656e3a3a64656c656761746542795369673a20696e76616c6964207369676e617475726545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220a2a9439ed57bc936661afd5d81378681d2d8a39b370b5a2c9a87cb780fb43f5264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "cap()": {
        "details": "Returns the cap on the token's total supply."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "delegates(address)": {
        "params": {
          "delegator": "The address to get delegatee for"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_delegates": {
        "details": "A record of each accounts delegate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DelegateChanged(address,address,address)": {
        "notice": "An event thats emitted when an account changes its delegate"
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "notice": "An event thats emitted when a delegate account's vote balance changes"
      }
    },
    "kind": "user",
    "methods": {
      "DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "checkpoints(address,uint32)": {
        "notice": "A record of votes checkpoints for each account, by index"
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "delegates(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "mint(address,uint256)": {
        "notice": "Creates `_amount` token to `_to`. Must only be called by the owner (MasterBreeder)."
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "numCheckpoints(address)": {
        "notice": "The number of checkpoints for each account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2872,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2878,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2880,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2882,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2884,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2886,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 2398,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "_owner",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4509,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "authorized",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4575,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "_cap",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4577,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "_totalLock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4579,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "lockFromBlock",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4581,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "lockToBlock",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4583,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "manualMintLimit",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4586,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "manualMinted",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4590,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "_locks",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4594,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "_lastUnlockBlock",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5188,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "_delegates",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5200,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "checkpoints",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)5193_storage))"
      },
      {
        "astId": 5205,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 5222,
        "contract": "src/main/GovernanceToken.sol:GovernanceToken",
        "label": "nonces",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)5193_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct GovernanceToken.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)5193_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)5193_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct GovernanceToken.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)5193_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)5193_storage": {
        "encoding": "inplace",
        "label": "struct GovernanceToken.Checkpoint",
        "members": [
          {
            "astId": 5190,
            "contract": "src/main/GovernanceToken.sol:GovernanceToken",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5192,
            "contract": "src/main/GovernanceToken.sol:GovernanceToken",
            "label": "votes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}