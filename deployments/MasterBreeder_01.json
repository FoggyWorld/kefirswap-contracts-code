{
  "address": "0x578C6c8dd1dA9082F136634FCCEBa830A35D32Dc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract GovernanceToken",
          "name": "_govToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityaddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_comfundaddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_founderaddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_halvingAfterBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userDepFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_devDepFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardMultiplier",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_blockDeltaStartStage",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_blockDeltaEndStage",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_userFeeStage",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_devFeeStage",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockAmount",
          "type": "uint256"
        }
      ],
      "name": "SendGovernanceTokenReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FINISH_BONUS_AT_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "HALVING_AT_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_FOR_COM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_FOR_DEV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_FOR_FOUNDERS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_FOR_LP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_LOCK_BONUS_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "REWARD_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_PER_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "START_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toAdd",
          "type": "address"
        }
      ],
      "name": "addAuthorized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockDeltaEndStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockDeltaStartStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFinish",
          "type": "uint256"
        }
      ],
      "name": "bonusFinishUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newCom",
          "type": "address"
        }
      ],
      "name": "comUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comfundaddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_ref",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        }
      ],
      "name": "dev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devDepFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "devFeeStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devaddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newFounder",
          "type": "address"
        }
      ],
      "name": "founderUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "founderaddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getGlobalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getGlobalRefAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid1",
          "type": "uint256"
        }
      ],
      "name": "getNewRewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "getPoolReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "forDev",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forFarmer",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forLP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forCom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forFounders",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user2",
          "type": "address"
        }
      ],
      "name": "getRefValueOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalRefs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govToken",
      "outputs": [
        {
          "internalType": "contract GovernanceToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_newHalving",
          "type": "uint256[]"
        }
      ],
      "name": "halvingUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityaddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newlock",
          "type": "uint256"
        }
      ],
      "name": "lockUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newcomlock",
          "type": "uint256"
        }
      ],
      "name": "lockcomUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newdevlock",
          "type": "uint256"
        }
      ],
      "name": "lockdevUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newfounderlock",
          "type": "uint256"
        }
      ],
      "name": "lockfounderUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newlplock",
          "type": "uint256"
        }
      ],
      "name": "locklpUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newLP",
          "type": "address"
        }
      ],
      "name": "lpUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolId1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accGovTokenPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "reclaimTokenOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toRemove",
          "type": "address"
        }
      ],
      "name": "removeAuthorized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "reviseDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "reviseWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_newMulReward",
          "type": "uint256[]"
        }
      ],
      "name": "rewardMulUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newReward",
          "type": "uint256"
        }
      ],
      "name": "rewardUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_devDepFees",
          "type": "uint256"
        }
      ],
      "name": "setDevDepFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_devFees",
          "type": "uint256[]"
        }
      ],
      "name": "setDevFeeStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_blockEnds",
          "type": "uint256[]"
        }
      ],
      "name": "setStageEnds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_blockStarts",
          "type": "uint256[]"
        }
      ],
      "name": "setStageStarts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_usrDepFees",
          "type": "uint256"
        }
      ],
      "name": "setUserDepFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_userFees",
          "type": "uint256[]"
        }
      ],
      "name": "setUserFeeStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newstarblock",
          "type": "uint256"
        }
      ],
      "name": "starblockUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "userDelta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userDepFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userFeeStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userGlobalInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "globalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalReferals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "globalRefAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebtAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastWithdrawBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstDepositBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockdelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDepositBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_ref",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x292747978efa69c7eab55a9e49b481ae334bf0e3f606464bc3c97aef071ff149",
  "receipt": {
    "to": null,
    "from": "0x889650279Ed98118Cb11774454Ff093F4d78b9fc",
    "contractAddress": "0x578C6c8dd1dA9082F136634FCCEBa830A35D32Dc",
    "transactionIndex": 1,
    "gasUsed": "9482968",
    "logsBloom": "0x
    "blockHash": "0x1ace96c3c6641b082d5aebf238c55de85151a66ca9b79bb69c93e5ead3b20941",
    "transactionHash": "0x292747978efa69c7eab55a9e49b481ae334bf0e3f606464bc3c97aef071ff149",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 333561,
        "transactionHash": "0x292747978efa69c7eab55a9e49b481ae334bf0e3f606464bc3c97aef071ff149",
        "address": "0x578C6c8dd1dA9082F136634FCCEBa830A35D32Dc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000889650279ed98118cb11774454ff093f4d78b9fc"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x1ace96c3c6641b082d5aebf238c55de85151a66ca9b79bb69c93e5ead3b20941"
      }
    ],
    "blockNumber": 333561,
    "cumulativeGasUsed": "9577812",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf5E547C683f5d72D6A463542d3e2cC13C5470D71",
    "0xA66d25bC3706Be0Cd14F20BC9d072D35b2dd8644",
    "0x4aa2b35bdcbaBa290107542B931Be0deA990E41B",
    "0xc970efE622822a32744eDa3E319732c02967E516",
    "0xF21c3317806407E649AE9daB418b54B766DD1038",
    "1000000000000000000",
    360844,
    96000,
    0,
    10000,
    [
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      4,
      4,
      4,
      4,
      4,
      4,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      4,
      4,
      4,
      8,
      8,
      8,
      8,
      8,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      8,
      8,
      8,
      8,
      8,
      8,
      4,
      4,
      2,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      4,
      4,
      4,
      4,
      8,
      8,
      8,
      8,
      8,
      16,
      16,
      32,
      32,
      32,
      32,
      16,
      8,
      4,
      2,
      1,
      1,
      1,
      1,
      2,
      2
    ],
    [
      0,
      1,
      572,
      13715,
      41143,
      68572,
      192001,
      384001
    ],
    [
      571,
      13714,
      41142,
      68571,
      192000,
      384000
    ],
    [
      1,
      84,
      92,
      96,
      98,
      99,
      995,
      9999
    ],
    [
      99,
      16,
      8,
      4,
      2,
      1,
      5,
      1
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "00f25360e272e2de60a12998c76a494a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract GovernanceToken\",\"name\":\"_govToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comfundaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_founderaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_halvingAfterBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDepFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devDepFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_blockDeltaStartStage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_blockDeltaEndStage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_userFeeStage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_devFeeStage\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"SendGovernanceTokenReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FINISH_BONUS_AT_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"HALVING_AT_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_FOR_COM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_FOR_DEV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_FOR_FOUNDERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_FOR_LP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_LOCK_BONUS_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REWARD_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockDeltaEndStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockDeltaStartStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFinish\",\"type\":\"uint256\"}],\"name\":\"bonusFinishUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCom\",\"type\":\"address\"}],\"name\":\"comUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comfundaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devDepFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"devFeeStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFounder\",\"type\":\"address\"}],\"name\":\"founderUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getGlobalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getGlobalRefAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid1\",\"type\":\"uint256\"}],\"name\":\"getNewRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"getPoolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forFarmer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forCom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forFounders\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user2\",\"type\":\"address\"}],\"name\":\"getRefValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalRefs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govToken\",\"outputs\":[{\"internalType\":\"contract GovernanceToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newHalving\",\"type\":\"uint256[]\"}],\"name\":\"halvingUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newlock\",\"type\":\"uint256\"}],\"name\":\"lockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newcomlock\",\"type\":\"uint256\"}],\"name\":\"lockcomUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newdevlock\",\"type\":\"uint256\"}],\"name\":\"lockdevUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newfounderlock\",\"type\":\"uint256\"}],\"name\":\"lockfounderUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newlplock\",\"type\":\"uint256\"}],\"name\":\"locklpUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLP\",\"type\":\"address\"}],\"name\":\"lpUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolId1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accGovTokenPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"reclaimTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"reviseDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"reviseWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newMulReward\",\"type\":\"uint256[]\"}],\"name\":\"rewardMulUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReward\",\"type\":\"uint256\"}],\"name\":\"rewardUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devDepFees\",\"type\":\"uint256\"}],\"name\":\"setDevDepFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_devFees\",\"type\":\"uint256[]\"}],\"name\":\"setDevFeeStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blockEnds\",\"type\":\"uint256[]\"}],\"name\":\"setStageEnds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blockStarts\",\"type\":\"uint256[]\"}],\"name\":\"setStageStarts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usrDepFees\",\"type\":\"uint256\"}],\"name\":\"setUserDepFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_userFees\",\"type\":\"uint256[]\"}],\"name\":\"setUserFeeStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newstarblock\",\"type\":\"uint256\"}],\"name\":\"starblockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"userDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userDepFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userFeeStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userGlobalInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"globalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalRefAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebtAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstDepositBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockdelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/main/MasterBreeder.sol\":\"MasterBreeder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"src/main/Authorizable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Authorizable is Ownable {\\n    mapping(address => bool) public authorized;\\n\\n    modifier onlyAuthorized() {\\n        require(authorized[msg.sender] || owner() == msg.sender);\\n        _;\\n    }\\n\\n    function addAuthorized(address _toAdd) public onlyOwner {\\n        authorized[_toAdd] = true;\\n    }\\n\\n    function removeAuthorized(address _toRemove) public onlyOwner {\\n        require(_toRemove != msg.sender);\\n        authorized[_toRemove] = false;\\n    }\\n}\",\"keccak256\":\"0xc15372825a5b752d8515abd72d54cbf8556b2b611b26e5f2b6eac9cfdba3e95f\",\"license\":\"MIT\"},\"src/main/GovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Authorizable.sol\\\";\\n\\n// The GovernanceToken\\ncontract GovernanceToken is ERC20, Ownable, Authorizable {\\n    uint256 private _cap;\\n    uint256 private _totalLock;\\n    uint256 public lockFromBlock;\\n    uint256 public lockToBlock;\\n    uint256 public manualMintLimit;\\n    uint256 public manualMinted = 0;\\n\\n    mapping(address => uint256) private _locks;\\n    mapping(address => uint256) private _lastUnlockBlock;\\n\\n    event Lock(address indexed to, uint256 value);\\n\\n    constructor(\\n      string memory _name,\\n      string memory _symbol,\\n      uint256 cap_,\\n      uint256 _manualMintLimit,\\n      uint256 _lockFromBlock,\\n      uint256 _lockToBlock\\n    ) public ERC20(_name, _symbol) {\\n        _cap = cap_;\\n        manualMintLimit = _manualMintLimit;\\n        lockFromBlock = _lockFromBlock;\\n        lockToBlock = _lockToBlock;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view returns (uint256) {\\n        return _cap;\\n    }\\n\\n    // Update the total cap - can go up or down but wont destroy previous tokens.\\n    function capUpdate(uint256 _newCap) public onlyAuthorized {\\n        _cap = _newCap;\\n    }\\n\\n    // Update the lockFromBlock\\n    function lockFromUpdate(uint256 _newLockFrom) public onlyAuthorized {\\n        lockFromBlock = _newLockFrom;\\n    }\\n\\n    // Update the lockToBlock\\n    function lockToUpdate(uint256 _newLockTo) public onlyAuthorized {\\n        lockToBlock = _newLockTo;\\n    }\\n\\n    function unlockedSupply() public view returns (uint256) {\\n        return totalSupply().sub(_totalLock);\\n    }\\n\\n    function lockedSupply() public view returns (uint256) {\\n        return totalLock();\\n    }\\n\\n    function circulatingSupply() public view returns (uint256) {\\n        return totalSupply();\\n    }\\n\\n    function totalLock() public view returns (uint256) {\\n        return _totalLock;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) {\\n            // When minting tokens\\n            require(\\n                totalSupply().add(amount) <= _cap,\\n                \\\"ERC20Capped: cap exceeded\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._transfer(sender, recipient, amount);\\n        _moveDelegates(_delegates[sender], _delegates[recipient], amount);\\n    }\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterBreeder).\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n    }\\n\\n    function manualMint(address _to, uint256 _amount) public onlyAuthorized {\\n        require(\\n            manualMinted.add(_amount) <= manualMintLimit,\\n            \\\"ERC20: sum of manualMinted and amount greater than manualMintLimit\\\"\\n        );\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n        manualMinted = manualMinted.add(_amount);\\n    }\\n\\n    function totalBalanceOf(address _holder) public view returns (uint256) {\\n        return _locks[_holder].add(balanceOf(_holder));\\n    }\\n\\n    function lockOf(address _holder) public view returns (uint256) {\\n        return _locks[_holder];\\n    }\\n\\n    function lastUnlockBlock(address _holder) public view returns (uint256) {\\n        return _lastUnlockBlock[_holder];\\n    }\\n\\n    function lock(address _holder, uint256 _amount) public onlyOwner {\\n        require(_holder != address(0), \\\"ERC20: lock to the zero address\\\");\\n        require(\\n            _amount <= balanceOf(_holder),\\n            \\\"ERC20: lock amount over balance\\\"\\n        );\\n\\n        _transfer(_holder, address(this), _amount);\\n\\n        _locks[_holder] = _locks[_holder].add(_amount);\\n        _totalLock = _totalLock.add(_amount);\\n        if (_lastUnlockBlock[_holder] < lockFromBlock) {\\n            _lastUnlockBlock[_holder] = lockFromBlock;\\n        }\\n        emit Lock(_holder, _amount);\\n    }\\n\\n    function canUnlockAmount(address _holder) public view returns (uint256) {\\n        if (block.number < lockFromBlock) {\\n            return 0;\\n        } else if (block.number >= lockToBlock) {\\n            return _locks[_holder];\\n        } else {\\n            uint256 releaseBlock = block.number.sub(_lastUnlockBlock[_holder]);\\n            uint256 numberLockBlock =\\n                lockToBlock.sub(_lastUnlockBlock[_holder]);\\n            return _locks[_holder].mul(releaseBlock).div(numberLockBlock);\\n        }\\n    }\\n\\n    function unlock() public {\\n        require(_locks[msg.sender] > 0, \\\"ERC20: cannot unlock\\\");\\n\\n        uint256 amount = canUnlockAmount(msg.sender);\\n        // just for sure\\n        if (amount > balanceOf(address(this))) {\\n            amount = balanceOf(address(this));\\n        }\\n        _transfer(address(this), msg.sender, amount);\\n        _locks[msg.sender] = _locks[msg.sender].sub(amount);\\n        _lastUnlockBlock[msg.sender] = block.number;\\n        _totalLock = _totalLock.sub(amount);\\n    }\\n\\n    // This function is for dev address migrate all balance to a multi sig address\\n    function transferAll(address _to) public {\\n        _locks[_to] = _locks[_to].add(_locks[msg.sender]);\\n\\n        if (_lastUnlockBlock[_to] < lockFromBlock) {\\n            _lastUnlockBlock[_to] = lockFromBlock;\\n        }\\n\\n        if (_lastUnlockBlock[_to] < _lastUnlockBlock[msg.sender]) {\\n            _lastUnlockBlock[_to] = _lastUnlockBlock[msg.sender];\\n        }\\n\\n        _locks[msg.sender] = 0;\\n        _lastUnlockBlock[msg.sender] = 0;\\n\\n        _transfer(msg.sender, _to, balanceOf(msg.sender));\\n    }\\n\\n    // Copied and modified from YAM code:\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\n    // Which is copied and modified from COMPOUND:\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\n\\n    /// @dev A record of each accounts delegate\\n    mapping(address => address) internal _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegator The address to get delegatee for\\n     */\\n    function delegates(address delegator) external view returns (address) {\\n        return _delegates[delegator];\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 domainSeparator =\\n            keccak256(\\n                abi.encode(\\n                    DOMAIN_TYPEHASH,\\n                    keccak256(bytes(name())),\\n                    getChainId(),\\n                    address(this)\\n                )\\n            );\\n\\n        bytes32 structHash =\\n            keccak256(\\n                abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\n            );\\n\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n            );\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(\\n            signatory != address(0),\\n            \\\"GovernanceToken::delegateBySig: invalid signature\\\"\\n        );\\n        require(\\n            nonce == nonces[signatory]++,\\n            \\\"GovernanceToken::delegateBySig: invalid nonce\\\"\\n        );\\n        require(now <= expiry, \\\"GovernanceToken::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint256) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return\\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            blockNumber < block.number,\\n            \\\"GovernanceToken::getPriorVotes: not yet determined\\\"\\n        );\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = _delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint256 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                // decrease old representative\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld =\\n                    srcRepNum > 0\\n                        ? checkpoints[srcRep][srcRepNum - 1].votes\\n                        : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                // increase new representative\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld =\\n                    dstRepNum > 0\\n                        ? checkpoints[dstRep][dstRepNum - 1].votes\\n                        : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    ) internal {\\n        uint32 blockNumber =\\n            safe32(\\n                block.number,\\n                \\\"GovernanceToken::_writeCheckpoint: block number exceeds 32 bits\\\"\\n            );\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newVotes\\n            );\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x21d5613ae6c463c7d677d0f51453f5324e44e11b33f4101b9d584e14df87f9de\",\"license\":\"MIT\"},\"src/main/MasterBreeder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./GovernanceToken.sol\\\";\\nimport \\\"./Authorizable.sol\\\";\\n\\n// MasterBreeder is the master breeder of whatever creature the GovernanceToken represents.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once GovernanceToken is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\ncontract MasterBreeder is Ownable, Authorizable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardDebtAtBlock; // the last block user stake\\n        uint256 lastWithdrawBlock; // the last block a user withdrew at.\\n        uint256 firstDepositBlock; // the last block a user deposited at.\\n        uint256 blockdelta; //time passed since withdrawals\\n        uint256 lastDepositBlock;\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of GovernanceTokens\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accGovTokenPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accGovTokenPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    struct UserGlobalInfo {\\n        uint256 globalAmount;\\n        mapping(address => uint256) referrals;\\n        uint256 totalReferals;\\n        uint256 globalRefAmount;\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. GovernanceTokens to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that GovernanceTokens distribution occurs.\\n        uint256 accGovTokenPerShare; // Accumulated GovernanceTokens per share, times 1e12. See below.\\n    }\\n\\n    // The Governance token\\n    GovernanceToken public govToken;\\n    //An ETH/USDC Oracle (Chainlink)\\n    address public usdOracle;\\n    // Dev address.\\n    address public devaddr;\\n    // LP address\\n    address public liquidityaddr;\\n    // Community Fund Address\\n    address public comfundaddr;\\n    // Founder Reward\\n    address public founderaddr;\\n    // GovernanceTokens created per block.\\n    uint256 public REWARD_PER_BLOCK;\\n    // Bonus muliplier for early GovernanceToken makers.\\n    uint256[] public REWARD_MULTIPLIER; // init in constructor function\\n    uint256[] public HALVING_AT_BLOCK; // init in constructor function\\n    uint256[] public blockDeltaStartStage;\\n    uint256[] public blockDeltaEndStage;\\n    uint256[] public userFeeStage;\\n    uint256[] public devFeeStage;\\n    uint256 public FINISH_BONUS_AT_BLOCK;\\n    uint256 public userDepFee;\\n    uint256 public devDepFee;\\n\\n    // The block number when GovernanceToken mining starts.\\n    uint256 public START_BLOCK;\\n\\n    uint256 public PERCENT_LOCK_BONUS_REWARD; // lock xx% of bounus reward in 3 year\\n    uint256 public PERCENT_FOR_DEV; // dev bounties + partnerships\\n    uint256 public PERCENT_FOR_LP; // LP fund\\n    uint256 public PERCENT_FOR_COM; // community fund\\n    uint256 public PERCENT_FOR_FOUNDERS; // founders fund\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    mapping(address => uint256) public poolId1; // poolId1 count from 1, subtraction 1 before using with poolInfo\\n    // Info of each user that stakes LP tokens. pid => user address => info\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    mapping(address => UserGlobalInfo) public userGlobalInfo;\\n    mapping(IERC20 => bool) public poolExistence;\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event SendGovernanceTokenReward(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        uint256 lockAmount\\n    );\\n\\n    modifier nonDuplicated(IERC20 _lpToken) {\\n        require(poolExistence[_lpToken] == false, \\\"MasterBreeder::nonDuplicated: duplicated\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        GovernanceToken _govToken,\\n        address _devaddr,\\n        address _liquidityaddr,\\n        address _comfundaddr,\\n        address _founderaddr,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock,\\n        uint256 _halvingAfterBlock,\\n        uint256 _userDepFee,\\n        uint256 _devDepFee,\\n        uint256[] memory _rewardMultiplier,\\n        uint256[] memory _blockDeltaStartStage,\\n        uint256[] memory _blockDeltaEndStage,\\n        uint256[] memory _userFeeStage,\\n        uint256[] memory _devFeeStage\\n    ) public {\\n        govToken = _govToken;\\n        devaddr = _devaddr;\\n        liquidityaddr = _liquidityaddr;\\n        comfundaddr = _comfundaddr;\\n        founderaddr = _founderaddr;\\n        REWARD_PER_BLOCK = _rewardPerBlock;\\n        START_BLOCK = _startBlock;\\n        userDepFee = _userDepFee;\\n        devDepFee = _devDepFee;\\n        REWARD_MULTIPLIER = _rewardMultiplier;\\n        blockDeltaStartStage = _blockDeltaStartStage;\\n        blockDeltaEndStage = _blockDeltaEndStage;\\n        userFeeStage = _userFeeStage;\\n        devFeeStage = _devFeeStage;\\n        for (uint256 i = 0; i < REWARD_MULTIPLIER.length - 1; i++) {\\n            uint256 halvingAtBlock = _halvingAfterBlock.mul(i+1).add(_startBlock).add(1);\\n            HALVING_AT_BLOCK.push(halvingAtBlock);\\n        }\\n        FINISH_BONUS_AT_BLOCK = _halvingAfterBlock\\n            .mul(REWARD_MULTIPLIER.length - 1)\\n            .add(_startBlock);\\n        HALVING_AT_BLOCK.push(uint256(-1));\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _withUpdate\\n    ) public onlyOwner nonDuplicated(_lpToken) {\\n        require(\\n            poolId1[address(_lpToken)] == 0,\\n            \\\"MasterBreeder::add: lp is already in pool\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock =\\n            block.number > START_BLOCK ? block.number : START_BLOCK;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolId1[address(_lpToken)] = poolInfo.length + 1;\\n        poolExistence[_lpToken] = true;\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accGovTokenPerShare: 0\\n            })\\n        );\\n    }\\n\\n    // Update the given pool's GovernanceToken allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 GovTokenForDev;\\n        uint256 GovTokenForFarmer;\\n        uint256 GovTokenForLP;\\n        uint256 GovTokenForCom;\\n        uint256 GovTokenForFounders;\\n        (\\n            GovTokenForDev,\\n            GovTokenForFarmer,\\n            GovTokenForLP,\\n            GovTokenForCom,\\n            GovTokenForFounders\\n        ) = getPoolReward(pool.lastRewardBlock, block.number, pool.allocPoint);\\n        govToken.mint(address(this), GovTokenForFarmer);\\n        pool.accGovTokenPerShare = pool.accGovTokenPerShare.add(\\n            GovTokenForFarmer.mul(1e12).div(lpSupply)\\n        );\\n        pool.lastRewardBlock = block.number;\\n        if (GovTokenForDev > 0) {\\n            govToken.mint(address(devaddr), GovTokenForDev);\\n            //Dev fund has xx% locked during the starting bonus period. After which locked funds drip out linearly each block over 3 years.\\n            if (block.number <= FINISH_BONUS_AT_BLOCK) {\\n                govToken.lock(address(devaddr), GovTokenForDev.mul(75).div(100));\\n            }\\n        }\\n        if (GovTokenForLP > 0) {\\n            govToken.mint(liquidityaddr, GovTokenForLP);\\n            //LP + Partnership fund has only xx% locked over time as most of it is needed early on for incentives and listings. The locked amount will drip out linearly each block after the bonus period.\\n            if (block.number <= FINISH_BONUS_AT_BLOCK) {\\n                govToken.lock(address(liquidityaddr), GovTokenForLP.mul(45).div(100));\\n            }\\n        }\\n        if (GovTokenForCom > 0) {\\n            govToken.mint(comfundaddr, GovTokenForCom);\\n            //Community Fund has xx% locked during bonus period and then drips out linearly over 3 years.\\n            if (block.number <= FINISH_BONUS_AT_BLOCK) {\\n                govToken.lock(address(comfundaddr), GovTokenForCom.mul(85).div(100));\\n            }\\n        }\\n        if (GovTokenForFounders > 0) {\\n            govToken.mint(founderaddr, GovTokenForFounders);\\n            //The Founders reward has xx% of their funds locked during the bonus period which then drip out linearly per block over 3 years.\\n            if (block.number <= FINISH_BONUS_AT_BLOCK) {\\n                govToken.lock(address(founderaddr), GovTokenForFounders.mul(95).div(100));\\n            }\\n        }\\n    }\\n\\n    // |--------------------------------------|\\n    // [20, 30, 40, 50, 60, 70, 80, 99999999]\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 result = 0;\\n        if (_from < START_BLOCK) return 0;\\n\\n        for (uint256 i = 0; i < HALVING_AT_BLOCK.length; i++) {\\n            uint256 endBlock = HALVING_AT_BLOCK[i];\\n            if (i > REWARD_MULTIPLIER.length-1) return 0;\\n\\n            if (_to <= endBlock) {\\n                uint256 m = _to.sub(_from).mul(REWARD_MULTIPLIER[i]);\\n                return result.add(m);\\n            }\\n\\n            if (_from < endBlock) {\\n                uint256 m = endBlock.sub(_from).mul(REWARD_MULTIPLIER[i]);\\n                _from = endBlock;\\n                result = result.add(m);\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function getPoolReward(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _allocPoint\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 forDev,\\n            uint256 forFarmer,\\n            uint256 forLP,\\n            uint256 forCom,\\n            uint256 forFounders\\n        )\\n    {\\n        uint256 multiplier = getMultiplier(_from, _to);\\n        uint256 amount =\\n            multiplier.mul(REWARD_PER_BLOCK).mul(_allocPoint).div(\\n                totalAllocPoint\\n            );\\n        uint256 GovernanceTokenCanMint = govToken.cap().sub(govToken.totalSupply());\\n\\n        if (GovernanceTokenCanMint < amount) {\\n            forDev = 0;\\n            forFarmer = GovernanceTokenCanMint;\\n            forLP = 0;\\n            forCom = 0;\\n            forFounders = 0;\\n        } else {\\n            forDev = amount.mul(PERCENT_FOR_DEV).div(100);\\n            forFarmer = amount;\\n            forLP = amount.mul(PERCENT_FOR_LP).div(100);\\n            forCom = amount.mul(PERCENT_FOR_COM).div(100);\\n            forFounders = amount.mul(PERCENT_FOR_FOUNDERS).div(100);\\n        }\\n    }\\n\\n    // View function to see pending GovernanceTokens on frontend.\\n    function pendingReward(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accGovTokenPerShare = pool.accGovTokenPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && lpSupply > 0) {\\n            uint256 GovTokenForFarmer;\\n            (, GovTokenForFarmer, , , ) = getPoolReward(\\n                pool.lastRewardBlock,\\n                block.number,\\n                pool.allocPoint\\n            );\\n            accGovTokenPerShare = accGovTokenPerShare.add(\\n                GovTokenForFarmer.mul(1e12).div(lpSupply)\\n            );\\n        }\\n        return user.amount.mul(accGovTokenPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    function claimRewards(uint256[] memory _pids) public {\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n          claimReward(_pids[i]);\\n        }\\n    }\\n\\n    function claimReward(uint256 _pid) public {\\n        updatePool(_pid);\\n        _harvest(_pid);\\n    }\\n\\n    // lock 95% of reward if it comes from bonus time\\n    function _harvest(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.amount > 0) {\\n            uint256 pending =\\n                user.amount.mul(pool.accGovTokenPerShare).div(1e12).sub(\\n                    user.rewardDebt\\n                );\\n            uint256 masterBal = govToken.balanceOf(address(this));\\n\\n            if (pending > masterBal) {\\n                pending = masterBal;\\n            }\\n\\n            if (pending > 0) {\\n                govToken.transfer(msg.sender, pending);\\n                uint256 lockAmount = 0;\\n                if (user.rewardDebtAtBlock <= FINISH_BONUS_AT_BLOCK) {\\n                    lockAmount = pending.mul(PERCENT_LOCK_BONUS_REWARD).div(\\n                        100\\n                    );\\n                    govToken.lock(msg.sender, lockAmount);\\n                }\\n\\n                user.rewardDebtAtBlock = block.number;\\n\\n                emit SendGovernanceTokenReward(msg.sender, _pid, pending, lockAmount);\\n            }\\n\\n            user.rewardDebt = user.amount.mul(pool.accGovTokenPerShare).div(1e12);\\n        }\\n    }\\n\\n    function getGlobalAmount(address _user) public view returns (uint256) {\\n        UserGlobalInfo memory current = userGlobalInfo[_user];\\n        return current.globalAmount;\\n    }\\n\\n    function getGlobalRefAmount(address _user) public view returns (uint256) {\\n        UserGlobalInfo memory current = userGlobalInfo[_user];\\n        return current.globalRefAmount;\\n    }\\n\\n    function getTotalRefs(address _user) public view returns (uint256) {\\n        UserGlobalInfo memory current = userGlobalInfo[_user];\\n        return current.totalReferals;\\n    }\\n\\n    function getRefValueOf(address _user, address _user2)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        UserGlobalInfo storage current = userGlobalInfo[_user];\\n        uint256 a = current.referrals[_user2];\\n        return a;\\n    }\\n\\n    // Deposit LP tokens to MasterBreeder for GovernanceToken allocation.\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _ref\\n    ) public nonReentrant {\\n        require(\\n            _amount > 0,\\n            \\\"MasterBreeder::deposit: amount must be greater than 0\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        UserInfo storage devr = userInfo[_pid][devaddr];\\n        UserGlobalInfo storage refer = userGlobalInfo[_ref];\\n        UserGlobalInfo storage current = userGlobalInfo[msg.sender];\\n\\n        if (refer.referrals[msg.sender] > 0) {\\n            refer.referrals[msg.sender] = refer.referrals[msg.sender] + _amount;\\n            refer.globalRefAmount = refer.globalRefAmount + _amount;\\n        } else {\\n            refer.referrals[msg.sender] = refer.referrals[msg.sender] + _amount;\\n            refer.totalReferals = refer.totalReferals + 1;\\n            refer.globalRefAmount = refer.globalRefAmount + _amount;\\n        }\\n\\n        current.globalAmount =\\n            current.globalAmount +\\n            _amount.mul(userDepFee).div(100);\\n\\n        updatePool(_pid);\\n        _harvest(_pid);\\n        pool.lpToken.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _amount\\n        );\\n        if (user.amount == 0) {\\n            user.rewardDebtAtBlock = block.number;\\n        }\\n        user.amount = user.amount.add(\\n            _amount.sub(_amount.mul(userDepFee).div(10000))\\n        );\\n        user.rewardDebt = user.amount.mul(pool.accGovTokenPerShare).div(1e12);\\n        devr.amount = devr.amount.add(\\n            _amount.sub(_amount.mul(devDepFee).div(10000))\\n        );\\n        devr.rewardDebt = devr.amount.mul(pool.accGovTokenPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n        if (user.firstDepositBlock > 0) {} else {\\n            user.firstDepositBlock = block.number;\\n        }\\n        user.lastDepositBlock = block.number;\\n    }\\n\\n    // Withdraw LP tokens from MasterBreeder.\\n    function withdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _ref\\n    ) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        UserGlobalInfo storage refer = userGlobalInfo[_ref];\\n        UserGlobalInfo storage current = userGlobalInfo[msg.sender];\\n        require(user.amount >= _amount, \\\"MasterBreeder::withdraw: not good\\\");\\n        if (_ref != address(0)) {\\n            refer.referrals[msg.sender] = refer.referrals[msg.sender] - _amount;\\n            refer.globalRefAmount = refer.globalRefAmount - _amount;\\n        }\\n        current.globalAmount = current.globalAmount - _amount;\\n\\n        updatePool(_pid);\\n        _harvest(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            if (user.lastWithdrawBlock > 0) {\\n                user.blockdelta = block.number - user.lastWithdrawBlock;\\n            } else {\\n                user.blockdelta = block.number - user.firstDepositBlock;\\n            }\\n            if (\\n                user.blockdelta == blockDeltaStartStage[0] ||\\n                block.number == user.lastDepositBlock\\n            ) {\\n                //25% fee for withdrawals of LP tokens in the same block this is to prevent abuse from flashloans\\n                pool.lpToken.safeTransfer(\\n                    address(msg.sender),\\n                    _amount.mul(userFeeStage[0]).div(100)\\n                );\\n                pool.lpToken.safeTransfer(\\n                    address(devaddr),\\n                    _amount.mul(devFeeStage[0]).div(100)\\n                );\\n            } else if (\\n                user.blockdelta >= blockDeltaStartStage[1] &&\\n                user.blockdelta <= blockDeltaEndStage[0]\\n            ) {\\n                //8% fee if a user deposits and withdraws in between same block and 59 minutes.\\n                pool.lpToken.safeTransfer(\\n                    address(msg.sender),\\n                    _amount.mul(userFeeStage[1]).div(100)\\n                );\\n                pool.lpToken.safeTransfer(\\n                    address(devaddr),\\n                    _amount.mul(devFeeStage[1]).div(100)\\n                );\\n            } else if (\\n                user.blockdelta >= blockDeltaStartStage[2] &&\\n                user.blockdelta <= blockDeltaEndStage[1]\\n            ) {\\n                //4% fee if a user deposits and withdraws after 1 hour but before 1 day.\\n                pool.lpToken.safeTransfer(\\n                    address(msg.sender),\\n                    _amount.mul(userFeeStage[2]).div(100)\\n                );\\n                pool.lpToken.safeTransfer(\\n                    address(devaddr),\\n                    _amount.mul(devFeeStage[2]).div(100)\\n                );\\n            } else if (\\n                user.blockdelta >= blockDeltaStartStage[3] &&\\n                user.blockdelta <= blockDeltaEndStage[2]\\n            ) {\\n                //2% fee if a user deposits and withdraws between after 1 day but before 3 days.\\n                pool.lpToken.safeTransfer(\\n                    address(msg.sender),\\n                    _amount.mul(userFeeStage[3]).div(100)\\n                );\\n                pool.lpToken.safeTransfer(\\n                    address(devaddr),\\n                    _amount.mul(devFeeStage[3]).div(100)\\n                );\\n            } else if (\\n                user.blockdelta >= blockDeltaStartStage[4] &&\\n                user.blockdelta <= blockDeltaEndStage[3]\\n            ) {\\n                //1% fee if a user deposits and withdraws after 3 days but before 5 days.\\n                pool.lpToken.safeTransfer(\\n                    address(msg.sender),\\n                    _amount.mul(userFeeStage[4]).div(100)\\n                );\\n                pool.lpToken.safeTransfer(\\n                    address(devaddr),\\n                    _amount.mul(devFeeStage[4]).div(100)\\n                );\\n            } else if (\\n                user.blockdelta >= blockDeltaStartStage[5] &&\\n                user.blockdelta <= blockDeltaEndStage[4]\\n            ) {\\n                //0.5% fee if a user deposits and withdraws if the user withdraws after 5 days but before 2 weeks.\\n                pool.lpToken.safeTransfer(\\n                    address(msg.sender),\\n                    _amount.mul(userFeeStage[5]).div(1000)\\n                );\\n                pool.lpToken.safeTransfer(\\n                    address(devaddr),\\n                    _amount.mul(devFeeStage[5]).div(1000)\\n                );\\n            } else if (\\n                user.blockdelta >= blockDeltaStartStage[6] &&\\n                user.blockdelta <= blockDeltaEndStage[5]\\n            ) {\\n                //0.25% fee if a user deposits and withdraws after 2 weeks.\\n                pool.lpToken.safeTransfer(\\n                    address(msg.sender),\\n                    _amount.mul(userFeeStage[6]).div(10000)\\n                );\\n                pool.lpToken.safeTransfer(\\n                    address(devaddr),\\n                    _amount.mul(devFeeStage[6]).div(10000)\\n                );\\n            } else if (user.blockdelta > blockDeltaStartStage[7]) {\\n                //0.1% fee if a user deposits and withdraws after 4 weeks.\\n                pool.lpToken.safeTransfer(\\n                    address(msg.sender),\\n                    _amount.mul(userFeeStage[7]).div(10000)\\n                );\\n                pool.lpToken.safeTransfer(\\n                    address(devaddr),\\n                    _amount.mul(devFeeStage[7]).div(10000)\\n                );\\n            }\\n            user.rewardDebt = user.amount.mul(pool.accGovTokenPerShare).div(1e12);\\n            emit Withdraw(msg.sender, _pid, _amount);\\n            user.lastWithdrawBlock = block.number;\\n        }\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY. This has the same 25% fee as same block withdrawals to prevent abuse of thisfunction.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        //reordered from Sushi function to prevent risk of reentrancy\\n        uint256 amountToSend = user.amount.mul(75).div(100);\\n        uint256 devToSend = user.amount.mul(25).div(100);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.lpToken.safeTransfer(address(msg.sender), amountToSend);\\n        pool.lpToken.safeTransfer(address(devaddr), devToSend);\\n        emit EmergencyWithdraw(msg.sender, _pid, amountToSend);\\n    }\\n\\n    // Safe GovToken transfer function, just in case if rounding error causes pool to not have enough GovTokens.\\n    function safeGovTokenTransfer(address _to, uint256 _amount) internal {\\n        uint256 govTokenBal = govToken.balanceOf(address(this));\\n        bool transferSuccess = false;\\n        if (_amount > govTokenBal) {\\n            transferSuccess = govToken.transfer(_to, govTokenBal);\\n        } else {\\n            transferSuccess = govToken.transfer(_to, _amount);\\n        }\\n        require(transferSuccess, \\\"MasterBreeder::safeGovTokenTransfer: transfer failed\\\");\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function dev(address _devaddr) public onlyAuthorized {\\n        devaddr = _devaddr;\\n    }\\n\\n    // Update Finish Bonus Block\\n    function bonusFinishUpdate(uint256 _newFinish) public onlyAuthorized {\\n        FINISH_BONUS_AT_BLOCK = _newFinish;\\n    }\\n\\n    // Update Halving At Block\\n    function halvingUpdate(uint256[] memory _newHalving) public onlyAuthorized {\\n        HALVING_AT_BLOCK = _newHalving;\\n    }\\n\\n    // Update Liquidityaddr\\n    function lpUpdate(address _newLP) public onlyAuthorized {\\n        liquidityaddr = _newLP;\\n    }\\n\\n    // Update comfundaddr\\n    function comUpdate(address _newCom) public onlyAuthorized {\\n        comfundaddr = _newCom;\\n    }\\n\\n    // Update founderaddr\\n    function founderUpdate(address _newFounder) public onlyAuthorized {\\n        founderaddr = _newFounder;\\n    }\\n\\n    // Update Reward Per Block\\n    function rewardUpdate(uint256 _newReward) public onlyAuthorized {\\n        REWARD_PER_BLOCK = _newReward;\\n    }\\n\\n    // Update Rewards Mulitplier Array\\n    function rewardMulUpdate(uint256[] memory _newMulReward)\\n        public\\n        onlyAuthorized\\n    {\\n        REWARD_MULTIPLIER = _newMulReward;\\n    }\\n\\n    // Update % lock for general users\\n    function lockUpdate(uint256 _newlock) public onlyAuthorized {\\n        PERCENT_LOCK_BONUS_REWARD = _newlock;\\n    }\\n\\n    // Update % lock for dev\\n    function lockdevUpdate(uint256 _newdevlock) public onlyAuthorized {\\n        PERCENT_FOR_DEV = _newdevlock;\\n    }\\n\\n    // Update % lock for LP\\n    function locklpUpdate(uint256 _newlplock) public onlyAuthorized {\\n        PERCENT_FOR_LP = _newlplock;\\n    }\\n\\n    // Update % lock for COM\\n    function lockcomUpdate(uint256 _newcomlock) public onlyAuthorized {\\n        PERCENT_FOR_COM = _newcomlock;\\n    }\\n\\n    // Update % lock for Founders\\n    function lockfounderUpdate(uint256 _newfounderlock) public onlyAuthorized {\\n        PERCENT_FOR_FOUNDERS = _newfounderlock;\\n    }\\n\\n    // Update START_BLOCK\\n    function starblockUpdate(uint256 _newstarblock) public onlyAuthorized {\\n        START_BLOCK = _newstarblock;\\n    }\\n\\n    function getNewRewardPerBlock(uint256 pid1) public view returns (uint256) {\\n        uint256 multiplier = getMultiplier(block.number - 1, block.number);\\n        if (pid1 == 0) {\\n            return multiplier.mul(REWARD_PER_BLOCK);\\n        } else {\\n            return\\n                multiplier\\n                    .mul(REWARD_PER_BLOCK)\\n                    .mul(poolInfo[pid1 - 1].allocPoint)\\n                    .div(totalAllocPoint);\\n        }\\n    }\\n\\n    function userDelta(uint256 _pid) public view returns (uint256) {\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        if (user.lastWithdrawBlock > 0) {\\n            uint256 estDelta = block.number - user.lastWithdrawBlock;\\n            return estDelta;\\n        } else {\\n            uint256 estDelta = block.number - user.firstDepositBlock;\\n            return estDelta;\\n        }\\n    }\\n\\n    function reviseWithdraw(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _block\\n    ) public onlyAuthorized() {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        user.lastWithdrawBlock = _block;\\n    }\\n\\n    function reviseDeposit(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _block\\n    ) public onlyAuthorized() {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        user.firstDepositBlock = _block;\\n    }\\n\\n    function setStageStarts(uint256[] memory _blockStarts)\\n        public\\n        onlyAuthorized()\\n    {\\n        blockDeltaStartStage = _blockStarts;\\n    }\\n\\n    function setStageEnds(uint256[] memory _blockEnds) public onlyAuthorized() {\\n        blockDeltaEndStage = _blockEnds;\\n    }\\n\\n    function setUserFeeStage(uint256[] memory _userFees)\\n        public\\n        onlyAuthorized()\\n    {\\n        userFeeStage = _userFees;\\n    }\\n\\n    function setDevFeeStage(uint256[] memory _devFees) public onlyAuthorized() {\\n        devFeeStage = _devFees;\\n    }\\n\\n    function setDevDepFee(uint256 _devDepFees) public onlyAuthorized() {\\n        devDepFee = _devDepFees;\\n    }\\n\\n    function setUserDepFee(uint256 _usrDepFees) public onlyAuthorized() {\\n        userDepFee = _usrDepFees;\\n    }\\n\\n    function reclaimTokenOwnership(address _newOwner) public onlyAuthorized() {\\n        govToken.transferOwnership(_newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd9eabf313a1f5c38c224f40d158ecbb680ac68e7bff46e138c5cd98f3b26cb42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000601e553480156200001657600080fd5b50604051620049863803806200498683398181016040526101e08110156200003d57600080fd5b815160208301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c01516101408d01805199519b9d9a9c989b979a9699959894979396929591948301929184640100000000821115620000a457600080fd5b908301906020820185811115620000ba57600080fd5b8251866020820283011164010000000082111715620000d857600080fd5b82525081516020918201928201910280838360005b8381101562000107578181015183820152602001620000ed565b50505050905001604052602001805160405193929190846401000000008211156200013157600080fd5b9083019060208201858111156200014757600080fd5b82518660208202830111640100000000821117156200016557600080fd5b82525081516020918201928201910280838360005b83811015620001945781810151838201526020016200017a565b5050505090500160405260200180516040519392919084640100000000821115620001be57600080fd5b908301906020820185811115620001d457600080fd5b8251866020820283011164010000000082111715620001f257600080fd5b82525081516020918201928201910280838360005b838110156200022157818101518382015260200162000207565b50505050905001604052602001805160405193929190846401000000008211156200024b57600080fd5b9083019060208201858111156200026157600080fd5b82518660208202830111640100000000821117156200027f57600080fd5b82525081516020918201928201910280838360005b83811015620002ae57818101518382015260200162000294565b5050505090500160405260200180516040519392919084640100000000821115620002d857600080fd5b908301906020820185811115620002ee57600080fd5b82518660208202830111640100000000821117156200030c57600080fd5b82525081516020918201928201910280838360005b838110156200033b57818101518382015260200162000321565b5050505090500160405250505060006200035a6200060860201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060016002819055508e600360006101000a8154816001600160a01b0302191690836001600160a01b031602179055508d600560006101000a8154816001600160a01b0302191690836001600160a01b031602179055508c600660006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b600760006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a600860006101000a8154816001600160a01b0302191690836001600160a01b031602179055508960098190555088601381905550866011819055508560128190555084600a9080519060200190620004a3929190620006ce565b508351620004b990600c906020870190620006ce565b508251620004cf90600d906020860190620006ce565b508151620004e590600e906020850190620006ce565b508051620004fb90600f906020840190620006ce565b5060005b600a54600019018110156200058f5760006200054c6001620005388d62000538866001018f6200060c60201b620038031790919060201c565b6200067360201b620038631790919060201c565b600b8054600181810183556000929092527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90191909155919091019050620004ff565b50620005b789620005386001600a80549050038b6200060c60201b620038031790919060201c565b6010555050600b80546001810182556000919091526000197f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db99091015550620007359b505050505050505050505050565b3390565b6000826200061d575060006200066d565b828202828482816200062b57fe5b04146200066a5760405162461bcd60e51b8152600401808060200182810382526021815260200180620049656021913960400191505060405180910390fd5b90505b92915050565b6000828201838110156200066a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b8280548282559060005260206000209081019282156200070c579160200282015b828111156200070c578251825591602001919060010190620006ef565b506200071a9291506200071e565b5090565b5b808211156200071a57600081556001016200071f565b61422080620007456000396000f3fe608060405234801561001057600080fd5b50600436106105145760003560e01c8063847bdaa4116102a1578063c6929e531161016b578063d49e77cd116100e3578063ed9bdeda11610097578063f2fde38b1161007c578063f2fde38b1461117c578063f2ffc22c146111a2578063fb075433146111bf57610514565b8063ed9bdeda1461114e578063eda670481461115657610514565b8063dd77b9fd116100c8578063dd77b9fd146110fb578063de98852414611129578063ec12173d1461114657610514565b8063d49e77cd146110af578063d9608d8a146110b757610514565b8063cb0b8ca11161013a578063ce2529c91161011f578063ce2529c914611046578063cf1c316a1461106c578063d007db291461109257610514565b8063cb0b8ca114611003578063cbd258b51461102057610514565b8063c6929e5314610f79578063c749d61414610f81578063c8a4271f14610fa7578063c8ed768014610faf57610514565b8063975532dc11610219578063b6066962116101cd578063beff2a53116101b2578063beff2a5314610f37578063c56a10ff14610f54578063c663baa614610f5c57610514565b8063b606696214610ee0578063b918161114610efd57610514565b806398969e82116101fe57806398969e8214610e8f578063a02306f914610ebb578063ae169a5014610ec357610514565b8063975532dc14610e7f578063980c2a9814610e8757610514565b80638dbb1e3a11610270578063929c697111610255578063929c697114610ded57806393f1a40b14610e1357806395fdf25814610e7757610514565b80638dbb1e3a14610d985780638dbdbe6d14610dbb57610514565b8063847bdaa414610c245780638cc883ce14610cc75780638d88a90e14610d6a5780638da5cb5b14610d9057610514565b80633c9d9267116103e25780635c5e490b1161035a57806364482f791161030e5780637c39c9c9116102f35780637c39c9c914610bcd57806382386d5814610bea57806382796e9814610c1c57610514565b806364482f7914610b9a578063715018a614610bc557610514565b80636066debd1161033f5780636066debd14610b435780636245f08414610b75578063630b5ba114610b9257610514565b80635c5e490b14610a7a5780635eac623914610aa057610514565b8063485d7d94116103b15780634dbf85ca116103965780634dbf85ca14610a1a57806351eb05a614610a405780635312ea8e14610a5d57610514565b8063485d7d94146109515780634af0e3e11461097757610514565b80633c9d92671461086c5780633d479cd5146108745780634179b4fb1461089157806346664064146108ae57610514565b80631eaaa045116104905780632fda773511610444578063354affb711610429578063354affb71461079b57806336ebcde61461083e57806339b3e8261461086457610514565b80632fda77351461075857806330fb8e0e1461077557610514565b8063245b211d11610475578063245b211d1461067b57806324b95c3e146106985780632a7b0107146106b557610514565b80631eaaa0451461063f57806322a376b01461067357610514565b80630a67d518116104e75780631526fe27116104cc5780631526fe27146105cd57806317caf6f11461061a5780631d465c821461062257610514565b80630a67d518146105935780630ad58d2f1461059b57610514565b806301b689c01461051957806305268cff14610538578063081e3eda1461055c57806309ae4d2c14610576575b600080fd5b6105366004803603602081101561052f57600080fd5b50356111dc565b005b610540611217565b604080516001600160a01b039092168252519081900360200190f35b610564611226565b60408051918252519081900360200190f35b6105646004803603602081101561058c57600080fd5b503561122c565b61056461126a565b610536600480360360608110156105b157600080fd5b50803590602081013590604001356001600160a01b0316611270565b6105ea600480360360208110156105e357600080fd5b50356118e2565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b610564611923565b6105646004803603602081101561063857600080fd5b5035611929565b6105366004803603606081101561065557600080fd5b508035906001600160a01b036020820135169060400135151561199c565b610540611c15565b6105366004803603602081101561069157600080fd5b5035611c24565b610536600480360360208110156106ae57600080fd5b5035611c5f565b610536600480360360208110156106cb57600080fd5b8101906020810181356401000000008111156106e657600080fd5b8201836020820111156106f857600080fd5b8035906020019184602083028401116401000000008311171561071a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611c9a945050505050565b6105646004803603602081101561076e57600080fd5b5035611ce7565b6105366004803603602081101561078b57600080fd5b50356001600160a01b0316611d05565b610536600480360360208110156107b157600080fd5b8101906020810181356401000000008111156107cc57600080fd5b8201836020820111156107de57600080fd5b8035906020019184602083028401116401000000008311171561080057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611d6a945050505050565b6105646004803603602081101561085457600080fd5b50356001600160a01b0316611db3565b610564611e00565b610540611e06565b6105366004803603602081101561088a57600080fd5b5035611e15565b610564600480360360208110156108a757600080fd5b5035611e50565b610536600480360360208110156108c457600080fd5b8101906020810181356401000000008111156108df57600080fd5b8201836020820111156108f157600080fd5b8035906020019184602083028401116401000000008311171561091357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611e5d945050505050565b6105366004803603602081101561096757600080fd5b50356001600160a01b0316611ea6565b6105366004803603602081101561098d57600080fd5b8101906020810181356401000000008111156109a857600080fd5b8201836020820111156109ba57600080fd5b803590602001918460208302840111640100000000831117156109dc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611f51945050505050565b61053660048036036020811015610a3057600080fd5b50356001600160a01b0316611f9a565b61053660048036036020811015610a5657600080fd5b5035611fff565b61053660048036036020811015610a7357600080fd5b50356125a7565b61056460048036036020811015610a9057600080fd5b50356001600160a01b03166126f6565b61053660048036036020811015610ab657600080fd5b810190602081018135640100000000811115610ad157600080fd5b820183602082011115610ae357600080fd5b80359060200191846020830284011164010000000083111715610b0557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612741945050505050565b61053660048036036060811015610b5957600080fd5b508035906001600160a01b036020820135169060400135612771565b61056460048036036020811015610b8b57600080fd5b50356127d0565b6105366127dd565b61053660048036036060811015610bb057600080fd5b508035906020810135906040013515156127fc565b6105366128e9565b61053660048036036020811015610be357600080fd5b50356129b4565b61053660048036036060811015610c0057600080fd5b508035906001600160a01b0360208201351690604001356129ef565b610564612a4e565b61053660048036036020811015610c3a57600080fd5b810190602081018135640100000000811115610c5557600080fd5b820183602082011115610c6757600080fd5b80359060200191846020830284011164010000000083111715610c8957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612a54945050505050565b61053660048036036020811015610cdd57600080fd5b810190602081018135640100000000811115610cf857600080fd5b820183602082011115610d0a57600080fd5b80359060200191846020830284011164010000000083111715610d2c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612a9d945050505050565b61053660048036036020811015610d8057600080fd5b50356001600160a01b0316612ae6565b610540612b4b565b61056460048036036040811015610dae57600080fd5b5080359060200135612b5a565b61053660048036036060811015610dd157600080fd5b50803590602081013590604001356001600160a01b0316612c56565b61056460048036036020811015610e0357600080fd5b50356001600160a01b0316612f10565b610e3f60048036036040811015610e2957600080fd5b50803590602001356001600160a01b0316612f5f565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b610564612fae565b610564612fb4565b610564612fba565b61056460048036036040811015610ea557600080fd5b50803590602001356001600160a01b0316612fc0565b61056461310e565b61053660048036036020811015610ed957600080fd5b5035613114565b61053660048036036020811015610ef657600080fd5b5035613126565b610f2360048036036020811015610f1357600080fd5b50356001600160a01b0316613161565b604080519115158252519081900360200190f35b61056460048036036020811015610f4d57600080fd5b5035613176565b610564613183565b61053660048036036020811015610f7257600080fd5b5035613189565b6105646131c4565b61053660048036036020811015610f9757600080fd5b50356001600160a01b03166131ca565b61054061322f565b610fd860048036036060811015610fc557600080fd5b508035906020810135906040013561323e565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b6105646004803603602081101561101957600080fd5b5035613429565b610f236004803603602081101561103657600080fd5b50356001600160a01b0316613436565b6105646004803603602081101561105c57600080fd5b50356001600160a01b031661344b565b6105366004803603602081101561108257600080fd5b50356001600160a01b031661345d565b610564600480360360208110156110a857600080fd5b50356134f8565b610540613505565b6110dd600480360360208110156110cd57600080fd5b50356001600160a01b0316613514565b60408051938452602084019290925282820152519081900360600190f35b6105646004803603604081101561111157600080fd5b506001600160a01b0381358116916020013516613535565b6105366004803603602081101561113f57600080fd5b5035613564565b61054061359f565b6105646135ae565b6105366004803603602081101561116c57600080fd5b50356001600160a01b03166135b4565b6105366004803603602081101561119257600080fd5b50356001600160a01b031661366c565b610536600480360360208110156111b857600080fd5b503561378d565b610536600480360360208110156111d557600080fd5b50356137c8565b3360009081526001602052604090205460ff16806112095750336111fe612b4b565b6001600160a01b0316145b61121257600080fd5b601455565b6003546001600160a01b031681565b60195490565b6000818152601b60209081526040808320338452909152812060038101541561125c576003015443039050611265565b60040154430390505b919050565b60165481565b6002805414156112c7576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600280819055506000601984815481106112dd57fe5b60009182526020808320878452601b82526040808520338087529084528186206001600160a01b0389168752601c90945281862090865294208254600490940290910194509092918611156113635760405162461bcd60e51b81526004018080602001828103825260218152602001806140fc6021913960400191505060405180910390fd5b6001600160a01b038516156113965733600090815260018301602052604090208054879003905560038201805487900390555b805486900381556113a687611fff565b6113af876138bd565b85156118d45782546113c19087613b74565b83556003830154156113de576003830154430360058401556113eb565b6004830154430360058401555b600c6000815481106113f957fe5b9060005260206000200154836005015414806114185750826006015443145b1561149757611469336114576064611451600e60008154811061143757fe5b90600052602060002001548b61380390919063ffffffff16565b90613bd1565b86546001600160a01b03169190613c38565b600554600f8054611492926001600160a01b031691611457916064916114519160009061143757fe5b611876565b600c6001815481106114a557fe5b90600052602060002001548360050154101580156114df5750600d6000815481106114cc57fe5b9060005260206000200154836005015411155b15611529576114fe336114576064611451600e60018154811061143757fe5b600554600f8054611492926001600160a01b0316916114579160649161145191600190811061143757fe5b600c60028154811061153757fe5b90600052602060002001548360050154101580156115715750600d60018154811061155e57fe5b9060005260206000200154836005015411155b156115bb57611590336114576064611451600e60028154811061143757fe5b600554600f8054611492926001600160a01b0316916114579160649161145191600290811061143757fe5b600c6003815481106115c957fe5b90600052602060002001548360050154101580156116035750600d6002815481106115f057fe5b9060005260206000200154836005015411155b1561164d57611622336114576064611451600e60038154811061143757fe5b600554600f8054611492926001600160a01b0316916114579160649161145191600390811061143757fe5b600c60048154811061165b57fe5b90600052602060002001548360050154101580156116955750600d60038154811061168257fe5b9060005260206000200154836005015411155b156116df576116b4336114576064611451600e60048154811061143757fe5b600554600f8054611492926001600160a01b0316916114579160649161145191600490811061143757fe5b600c6005815481106116ed57fe5b90600052602060002001548360050154101580156117275750600d60048154811061171457fe5b9060005260206000200154836005015411155b1561177757611747336114576103e8611451600e60058154811061143757fe5b611492600560009054906101000a90046001600160a01b03166114576103e8611451600f60058154811061143757fe5b600c60068154811061178557fe5b90600052602060002001548360050154101580156117bf5750600d6005815481106117ac57fe5b9060005260206000200154836005015411155b1561180b576117df33611457612710611451600e60068154811061143757fe5b600554600f8054611492926001600160a01b031691611457916127109161145191600690811061143757fe5b600c60078154811061181957fe5b9060005260206000200154836005015411156118765761184a33611457612710611451600e60078154811061143757fe5b600554600f8054611876926001600160a01b031691611457916127109161145191600790811061143757fe5b600384015483546118919164e8d4a510009161145191613803565b6001840155604080518781529051889133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a34360038401555b505060016002555050505050565b601981815481106118ef57fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b601e5481565b6000806119396001430343612b5a565b9050826119565760095461194e908290613803565b915050611265565b61194e601e546114516019600187038154811061196f57fe5b9060005260206000209060040201600101546119966009548661380390919063ffffffff16565b90613803565b6119a4613cb8565b6001600160a01b03166119b5612b4b565b6001600160a01b031614611a10576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0382166000908152601d6020526040902054829060ff1615611a6a5760405162461bcd60e51b81526004018080602001828103825260288152602001806141646028913960400191505060405180910390fd5b6001600160a01b0383166000908152601a602052604090205415611abf5760405162461bcd60e51b81526004018080602001828103825260298152602001806140d36029913960400191505060405180910390fd5b8115611acd57611acd6127dd565b60006013544311611ae057601354611ae2565b435b601e54909150611af29086613863565b601e55601980546001600160a01b039586166000818152601a6020908152604080832060019586019055601d8252808320805460ff1916861790558051608081018252938452908301998a5282019485526060820181815284549384018555939052517f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96956004909202918201805473ffffffffffffffffffffffffffffffffffffffff1916919097161790955594517f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9696850155517f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9697840155505090517f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c969890910155565b6006546001600160a01b031681565b3360009081526001602052604090205460ff1680611c51575033611c46612b4b565b6001600160a01b0316145b611c5a57600080fd5b601055565b3360009081526001602052604090205460ff1680611c8c575033611c81612b4b565b6001600160a01b0316145b611c9557600080fd5b601355565b3360009081526001602052604090205460ff1680611cc7575033611cbc612b4b565b6001600160a01b0316145b611cd057600080fd5b8051611ce390600e90602084019061402b565b5050565b600a8181548110611cf457fe5b600091825260209091200154905081565b3360009081526001602052604090205460ff1680611d32575033611d27612b4b565b6001600160a01b0316145b611d3b57600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081526001602052604090205460ff1680611d97575033611d8c612b4b565b6001600160a01b0316145b611da057600080fd5b8051611ce390600b90602084019061402b565b6000611dbd614076565b50506001600160a01b03166000908152601c6020908152604091829020825160608101845281548152600282015492810183905260039091015492019190915290565b60135481565b6007546001600160a01b031681565b3360009081526001602052604090205460ff1680611e42575033611e37612b4b565b6001600160a01b0316145b611e4b57600080fd5b600955565b600b8181548110611cf457fe5b3360009081526001602052604090205460ff1680611e8a575033611e7f612b4b565b6001600160a01b0316145b611e9357600080fd5b8051611ce390600a90602084019061402b565b611eae613cb8565b6001600160a01b0316611ebf612b4b565b6001600160a01b031614611f1a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116331415611f3057600080fd5b6001600160a01b03166000908152600160205260409020805460ff19169055565b3360009081526001602052604090205460ff1680611f7e575033611f73612b4b565b6001600160a01b0316145b611f8757600080fd5b8051611ce390600d90602084019061402b565b3360009081526001602052604090205460ff1680611fc7575033611fbc612b4b565b6001600160a01b0316145b611fd057600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006019828154811061200e57fe5b906000526020600020906004020190508060020154431161202f57506125a4565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561207957600080fd5b505afa15801561208d573d6000803e3d6000fd5b505050506040513d60208110156120a357600080fd5b50519050806120b95750436002909101556125a4565b60008060008060006120d4876002015443896001015461323e565b600354604080516340c10f1960e01b8152306004820152602481018790529051969b5094995092975090955093506001600160a01b0316916340c10f199160448082019260009290919082900301818387803b15801561213357600080fd5b505af1158015612147573d6000803e3d6000fd5b5050505061217561216a8761145164e8d4a510008861380390919063ffffffff16565b600389015490613863565b6003880155436002880155841561228757600354600554604080516340c10f1960e01b81526001600160a01b03928316600482015260248101899052905191909216916340c10f1991604480830192600092919082900301818387803b1580156121de57600080fd5b505af11580156121f2573d6000803e3d6000fd5b505050506010544311612287576003546005546001600160a01b039182169163282d3fdf911661222860646114518a604b613803565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561226e57600080fd5b505af1158015612282573d6000803e3d6000fd5b505050505b821561238e57600354600654604080516340c10f1960e01b81526001600160a01b03928316600482015260248101879052905191909216916340c10f1991604480830192600092919082900301818387803b1580156122e557600080fd5b505af11580156122f9573d6000803e3d6000fd5b50505050601054431161238e576003546006546001600160a01b039182169163282d3fdf911661232f606461145188602d613803565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561237557600080fd5b505af1158015612389573d6000803e3d6000fd5b505050505b811561249557600354600754604080516340c10f1960e01b81526001600160a01b03928316600482015260248101869052905191909216916340c10f1991604480830192600092919082900301818387803b1580156123ec57600080fd5b505af1158015612400573d6000803e3d6000fd5b505050506010544311612495576003546007546001600160a01b039182169163282d3fdf91166124366064611451876055613803565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561247c57600080fd5b505af1158015612490573d6000803e3d6000fd5b505050505b801561259c57600354600854604080516340c10f1960e01b81526001600160a01b03928316600482015260248101859052905191909216916340c10f1991604480830192600092919082900301818387803b1580156124f357600080fd5b505af1158015612507573d6000803e3d6000fd5b50505050601054431161259c576003546008546001600160a01b039182169163282d3fdf911661253d606461145186605f613803565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561258357600080fd5b505af1158015612597573d6000803e3d6000fd5b505050505b505050505050505b50565b6002805414156125fe576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002808190555060006019828154811061261457fe5b60009182526020808320858452601b8252604080852033865290925290832080546004909302909101935091906126539060649061145190604b613803565b9050600061267460646114516019866000015461380390919063ffffffff16565b600080855560018501558454909150612697906001600160a01b03163384613c38565b60055484546126b3916001600160a01b03918216911683613c38565b604080518381529051869133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350506001600255505050565b6000612700614076565b50506001600160a01b03166000908152601c602090815260409182902082516060810184528154815260028201549281019290925260030154910181905290565b60005b8151811015611ce35761276982828151811061275c57fe5b6020026020010151613114565b600101612744565b3360009081526001602052604090205460ff168061279e575033612793612b4b565b6001600160a01b0316145b6127a757600080fd5b6000928352601b602090815260408085206001600160a01b039094168552929052912060030155565b600c8181548110611cf457fe5b60195460005b81811015611ce3576127f481611fff565b6001016127e3565b612804613cb8565b6001600160a01b0316612815612b4b565b6001600160a01b031614612870576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b801561287e5761287e6127dd565b6128bb826128b56019868154811061289257fe5b906000526020600020906004020160010154601e54613b7490919063ffffffff16565b90613863565b601e8190555081601984815481106128cf57fe5b906000526020600020906004020160010181905550505050565b6128f1613cb8565b6001600160a01b0316612902612b4b565b6001600160a01b03161461295d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b3360009081526001602052604090205460ff16806129e15750336129d6612b4b565b6001600160a01b0316145b6129ea57600080fd5b601155565b3360009081526001602052604090205460ff1680612a1c575033612a11612b4b565b6001600160a01b0316145b612a2557600080fd5b6000928352601b602090815260408085206001600160a01b039094168552929052912060040155565b60115481565b3360009081526001602052604090205460ff1680612a81575033612a76612b4b565b6001600160a01b0316145b612a8a57600080fd5b8051611ce390600c90602084019061402b565b3360009081526001602052604090205460ff1680612aca575033612abf612b4b565b6001600160a01b0316145b612ad357600080fd5b8051611ce390600f90602084019061402b565b3360009081526001602052604090205460ff1680612b13575033612b08612b4b565b6001600160a01b0316145b612b1c57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b6013546000908190841015612b73576000915050612c50565b60005b600b54811015612c4c576000600b8281548110612b8f57fe5b906000526020600020015490506001600a8054905003821115612bb85760009350505050612c50565b808511612bfe576000612be7600a8481548110612bd157fe5b600091825260209091200154611996888a613b74565b9050612bf38482613863565b945050505050612c50565b80861015612c43576000612c2e600a8481548110612c1857fe5b600091825260209091200154611996848a613b74565b91965086919050612c3f8482613863565b9350505b50600101612b76565b5090505b92915050565b600280541415612cad576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805581612ced5760405162461bcd60e51b815260040180806020018281038252603581526020018061418c6035913960400191505060405180910390fd5b600060198481548110612cfc57fe5b60009182526020808320878452601b82526040808520338087529084528186206005546001600160a01b039081168852838820908a168852601c865283882092885283882060018401909652929096205460049590950290920195509290919015612d8757336000908152600183016020526040902080548801905560038201805488019055612db6565b336000908152600180840160205260409091208054890190556002830180549091019055600382018054880190555b612dd060646114516011548a61380390919063ffffffff16565b8154018155612dde88611fff565b612de7886138bd565b8454612dfe906001600160a01b031633308a613cbc565b8354612e0b574360028501555b612e3b612e33612e2c6127106114516011548c61380390919063ffffffff16565b8990613b74565b855490613863565b8085556003860154612e589164e8d4a51000916114519190613803565b8460010181905550612e89612e81612e2c6127106114516012548c61380390919063ffffffff16565b845490613863565b8084556003860154612ea69164e8d4a51000916114519190613803565b6001840155604080518881529051899133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3600484015415612ef157612ef8565b4360048501555b50504360069092019190915550506001600255505050565b6000612f1a614076565b50506001600160a01b03166000908152601c60209081526040918290208251606081018452815480825260028301549382019390935260039091015492019190915290565b601b602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020154908060030154908060040154908060050154908060060154905087565b60145481565b60095481565b60105481565b60008060198481548110612fd057fe5b60009182526020808320878452601b825260408085206001600160a01b03898116875290845281862060049586029093016003810154815484516370a0823160e01b81523098810198909852935191985093969395939492909116926370a08231926024808301939192829003018186803b15801561304e57600080fd5b505afa158015613062573d6000803e3d6000fd5b505050506040513d602081101561307857600080fd5b50516002850154909150431180156130905750600081115b156130d55760006130aa856002015443876001015461323e565b509193506130d192506130ca91508490506114518464e8d4a51000613803565b8490613863565b9250505b61310383600101546130fd64e8d4a5100061145186886000015461380390919063ffffffff16565b90613b74565b979650505050505050565b60175481565b61311d81611fff565b6125a4816138bd565b3360009081526001602052604090205460ff1680613153575033613148612b4b565b6001600160a01b0316145b61315c57600080fd5b601555565b60016020526000908152604090205460ff1681565b600f8181548110611cf457fe5b60125481565b3360009081526001602052604090205460ff16806131b65750336131ab612b4b565b6001600160a01b0316145b6131bf57600080fd5b601755565b60185481565b3360009081526001602052604090205460ff16806131f75750336131ec612b4b565b6001600160a01b0316145b61320057600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b6000806000806000806132518989612b5a565b90506000613274601e546114518a6119966009548761380390919063ffffffff16565b90506000613385600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156132c957600080fd5b505afa1580156132dd573d6000803e3d6000fd5b505050506040513d60208110156132f357600080fd5b5051600354604080517f355274ea00000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163355274ea91600480820192602092909190829003018186803b15801561335357600080fd5b505afa158015613367573d6000803e3d6000fd5b505050506040513d602081101561337d57600080fd5b505190613b74565b9050818110156133a7576000975080965060009550600094506000935061341b565b6133c160646114516015548561380390919063ffffffff16565b97508196506133e060646114516016548561380390919063ffffffff16565b95506133fc60646114516017548561380390919063ffffffff16565b945061341860646114516018548561380390919063ffffffff16565b93505b505050939792965093509350565b600d8181548110611cf457fe5b601d6020526000908152604090205460ff1681565b601a6020526000908152604090205481565b613465613cb8565b6001600160a01b0316613476612b4b565b6001600160a01b0316146134d1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b600e8181548110611cf457fe5b6005546001600160a01b031681565b601c6020526000908152604090208054600282015460039092015490919083565b6001600160a01b039182166000908152601c602090815260408083209390941682526001909201909152205490565b3360009081526001602052604090205460ff1680613591575033613586612b4b565b6001600160a01b0316145b61359a57600080fd5b601855565b6008546001600160a01b031681565b60155481565b3360009081526001602052604090205460ff16806135e15750336135d6612b4b565b6001600160a01b0316145b6135ea57600080fd5b600354604080517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529151919092169163f2fde38b91602480830192600092919082900301818387803b15801561365157600080fd5b505af1158015613665573d6000803e3d6000fd5b5050505050565b613674613cb8565b6001600160a01b0316613685612b4b565b6001600160a01b0316146136e0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166137255760405162461bcd60e51b81526004018080602001828103825260268152602001806140ad6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081526001602052604090205460ff16806137ba5750336137af612b4b565b6001600160a01b0316145b6137c357600080fd5b601655565b3360009081526001602052604090205460ff16806137f55750336137ea612b4b565b6001600160a01b0316145b6137fe57600080fd5b601255565b60008261381257506000612c50565b8282028284828161381f57fe5b041461385c5760405162461bcd60e51b81526004018080602001828103825260218152602001806141436021913960400191505060405180910390fd5b9392505050565b60008282018381101561385c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000601982815481106138cc57fe5b60009182526020808320858452601b82526040808520338652909252922080546004909202909201925015613b6f57600061392982600101546130fd64e8d4a510006114518760030154876000015461380390919063ffffffff16565b600354604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561397a57600080fd5b505afa15801561398e573d6000803e3d6000fd5b505050506040513d60208110156139a457600080fd5b50519050808211156139b4578091505b8115613b4c57600354604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810185905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015613a2757600080fd5b505af1158015613a3b573d6000803e3d6000fd5b505050506040513d6020811015613a5157600080fd5b5050601054600284015460009110613b0557613a7d60646114516014548661380390919063ffffffff16565b600354604080517f282d3fdf0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290519293506001600160a01b039091169163282d3fdf9160448082019260009290919082900301818387803b158015613aec57600080fd5b505af1158015613b00573d6000803e3d6000fd5b505050505b43600285015560408051848152602081018390528151889233927f3887f2857beaaf367eb618dfb5e22c1ebd74425affb0602c2e9fe126e3f860eb929081900390910190a3505b60038401548354613b679164e8d4a510009161145191613803565b600184015550505b505050565b600082821115613bcb576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000808211613c27576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613c3057fe5b049392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052613b6f908490613d4a565b3390565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052613d44908590613d4a565b50505050565b6060613d9f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613dfb9092919063ffffffff16565b805190915015613b6f57808060200190516020811015613dbe57600080fd5b5051613b6f5760405162461bcd60e51b815260040180806020018281038252602a8152602001806141c1602a913960400191505060405180910390fd5b6060613e0a8484600085613e12565b949350505050565b606082471015613e535760405162461bcd60e51b815260040180806020018281038252602681526020018061411d6026913960400191505060405180910390fd5b613e5c85613f81565b613ead576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310613f0a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613ecd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613f6c576040519150601f19603f3d011682016040523d82523d6000602084013e613f71565b606091505b5091509150613103828286613f87565b3b151590565b60608315613f9657508161385c565b825115613fa65782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613ff0578181015183820152602001613fd8565b50505050905090810190601f16801561401d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215614066579160200282015b8281111561406657825182559160200191906001019061404b565b50614072929150614097565b5090565b60405180606001604052806000815260200160008152602001600081525090565b5b80821115614072576000815560010161409856fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734d6173746572427265656465723a3a6164643a206c7020697320616c726561647920696e20706f6f6c4d6173746572427265656465723a3a77697468647261773a206e6f7420676f6f64416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d6173746572427265656465723a3a6e6f6e4475706c6963617465643a206475706c6963617465644d6173746572427265656465723a3a6465706f7369743a20616d6f756e74206d7573742062652067726561746572207468616e20305361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220973a2b5a5e967b69172642397d91dc7925e017d1761e3f6f13a5ab55494dc43164736f6c634300060c0033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106105145760003560e01c8063847bdaa4116102a1578063c6929e531161016b578063d49e77cd116100e3578063ed9bdeda11610097578063f2fde38b1161007c578063f2fde38b1461117c578063f2ffc22c146111a2578063fb075433146111bf57610514565b8063ed9bdeda1461114e578063eda670481461115657610514565b8063dd77b9fd116100c8578063dd77b9fd146110fb578063de98852414611129578063ec12173d1461114657610514565b8063d49e77cd146110af578063d9608d8a146110b757610514565b8063cb0b8ca11161013a578063ce2529c91161011f578063ce2529c914611046578063cf1c316a1461106c578063d007db291461109257610514565b8063cb0b8ca114611003578063cbd258b51461102057610514565b8063c6929e5314610f79578063c749d61414610f81578063c8a4271f14610fa7578063c8ed768014610faf57610514565b8063975532dc11610219578063b6066962116101cd578063beff2a53116101b2578063beff2a5314610f37578063c56a10ff14610f54578063c663baa614610f5c57610514565b8063b606696214610ee0578063b918161114610efd57610514565b806398969e82116101fe57806398969e8214610e8f578063a02306f914610ebb578063ae169a5014610ec357610514565b8063975532dc14610e7f578063980c2a9814610e8757610514565b80638dbb1e3a11610270578063929c697111610255578063929c697114610ded57806393f1a40b14610e1357806395fdf25814610e7757610514565b80638dbb1e3a14610d985780638dbdbe6d14610dbb57610514565b8063847bdaa414610c245780638cc883ce14610cc75780638d88a90e14610d6a5780638da5cb5b14610d9057610514565b80633c9d9267116103e25780635c5e490b1161035a57806364482f791161030e5780637c39c9c9116102f35780637c39c9c914610bcd57806382386d5814610bea57806382796e9814610c1c57610514565b806364482f7914610b9a578063715018a614610bc557610514565b80636066debd1161033f5780636066debd14610b435780636245f08414610b75578063630b5ba114610b9257610514565b80635c5e490b14610a7a5780635eac623914610aa057610514565b8063485d7d94116103b15780634dbf85ca116103965780634dbf85ca14610a1a57806351eb05a614610a405780635312ea8e14610a5d57610514565b8063485d7d94146109515780634af0e3e11461097757610514565b80633c9d92671461086c5780633d479cd5146108745780634179b4fb1461089157806346664064146108ae57610514565b80631eaaa045116104905780632fda773511610444578063354affb711610429578063354affb71461079b57806336ebcde61461083e57806339b3e8261461086457610514565b80632fda77351461075857806330fb8e0e1461077557610514565b8063245b211d11610475578063245b211d1461067b57806324b95c3e146106985780632a7b0107146106b557610514565b80631eaaa0451461063f57806322a376b01461067357610514565b80630a67d518116104e75780631526fe27116104cc5780631526fe27146105cd57806317caf6f11461061a5780631d465c821461062257610514565b80630a67d518146105935780630ad58d2f1461059b57610514565b806301b689c01461051957806305268cff14610538578063081e3eda1461055c57806309ae4d2c14610576575b600080fd5b6105366004803603602081101561052f57600080fd5b50356111dc565b005b610540611217565b604080516001600160a01b039092168252519081900360200190f35b610564611226565b60408051918252519081900360200190f35b6105646004803603602081101561058c57600080fd5b503561122c565b61056461126a565b610536600480360360608110156105b157600080fd5b50803590602081013590604001356001600160a01b0316611270565b6105ea600480360360208110156105e357600080fd5b50356118e2565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b610564611923565b6105646004803603602081101561063857600080fd5b5035611929565b6105366004803603606081101561065557600080fd5b508035906001600160a01b036020820135169060400135151561199c565b610540611c15565b6105366004803603602081101561069157600080fd5b5035611c24565b610536600480360360208110156106ae57600080fd5b5035611c5f565b610536600480360360208110156106cb57600080fd5b8101906020810181356401000000008111156106e657600080fd5b8201836020820111156106f857600080fd5b8035906020019184602083028401116401000000008311171561071a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611c9a945050505050565b6105646004803603602081101561076e57600080fd5b5035611ce7565b6105366004803603602081101561078b57600080fd5b50356001600160a01b0316611d05565b610536600480360360208110156107b157600080fd5b8101906020810181356401000000008111156107cc57600080fd5b8201836020820111156107de57600080fd5b8035906020019184602083028401116401000000008311171561080057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611d6a945050505050565b6105646004803603602081101561085457600080fd5b50356001600160a01b0316611db3565b610564611e00565b610540611e06565b6105366004803603602081101561088a57600080fd5b5035611e15565b610564600480360360208110156108a757600080fd5b5035611e50565b610536600480360360208110156108c457600080fd5b8101906020810181356401000000008111156108df57600080fd5b8201836020820111156108f157600080fd5b8035906020019184602083028401116401000000008311171561091357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611e5d945050505050565b6105366004803603602081101561096757600080fd5b50356001600160a01b0316611ea6565b6105366004803603602081101561098d57600080fd5b8101906020810181356401000000008111156109a857600080fd5b8201836020820111156109ba57600080fd5b803590602001918460208302840111640100000000831117156109dc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611f51945050505050565b61053660048036036020811015610a3057600080fd5b50356001600160a01b0316611f9a565b61053660048036036020811015610a5657600080fd5b5035611fff565b61053660048036036020811015610a7357600080fd5b50356125a7565b61056460048036036020811015610a9057600080fd5b50356001600160a01b03166126f6565b61053660048036036020811015610ab657600080fd5b810190602081018135640100000000811115610ad157600080fd5b820183602082011115610ae357600080fd5b80359060200191846020830284011164010000000083111715610b0557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612741945050505050565b61053660048036036060811015610b5957600080fd5b508035906001600160a01b036020820135169060400135612771565b61056460048036036020811015610b8b57600080fd5b50356127d0565b6105366127dd565b61053660048036036060811015610bb057600080fd5b508035906020810135906040013515156127fc565b6105366128e9565b61053660048036036020811015610be357600080fd5b50356129b4565b61053660048036036060811015610c0057600080fd5b508035906001600160a01b0360208201351690604001356129ef565b610564612a4e565b61053660048036036020811015610c3a57600080fd5b810190602081018135640100000000811115610c5557600080fd5b820183602082011115610c6757600080fd5b80359060200191846020830284011164010000000083111715610c8957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612a54945050505050565b61053660048036036020811015610cdd57600080fd5b810190602081018135640100000000811115610cf857600080fd5b820183602082011115610d0a57600080fd5b80359060200191846020830284011164010000000083111715610d2c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612a9d945050505050565b61053660048036036020811015610d8057600080fd5b50356001600160a01b0316612ae6565b610540612b4b565b61056460048036036040811015610dae57600080fd5b5080359060200135612b5a565b61053660048036036060811015610dd157600080fd5b50803590602081013590604001356001600160a01b0316612c56565b61056460048036036020811015610e0357600080fd5b50356001600160a01b0316612f10565b610e3f60048036036040811015610e2957600080fd5b50803590602001356001600160a01b0316612f5f565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b610564612fae565b610564612fb4565b610564612fba565b61056460048036036040811015610ea557600080fd5b50803590602001356001600160a01b0316612fc0565b61056461310e565b61053660048036036020811015610ed957600080fd5b5035613114565b61053660048036036020811015610ef657600080fd5b5035613126565b610f2360048036036020811015610f1357600080fd5b50356001600160a01b0316613161565b604080519115158252519081900360200190f35b61056460048036036020811015610f4d57600080fd5b5035613176565b610564613183565b61053660048036036020811015610f7257600080fd5b5035613189565b6105646131c4565b61053660048036036020811015610f9757600080fd5b50356001600160a01b03166131ca565b61054061322f565b610fd860048036036060811015610fc557600080fd5b508035906020810135906040013561323e565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b6105646004803603602081101561101957600080fd5b5035613429565b610f236004803603602081101561103657600080fd5b50356001600160a01b0316613436565b6105646004803603602081101561105c57600080fd5b50356001600160a01b031661344b565b6105366004803603602081101561108257600080fd5b50356001600160a01b031661345d565b610564600480360360208110156110a857600080fd5b50356134f8565b610540613505565b6110dd600480360360208110156110cd57600080fd5b50356001600160a01b0316613514565b60408051938452602084019290925282820152519081900360600190f35b6105646004803603604081101561111157600080fd5b506001600160a01b0381358116916020013516613535565b6105366004803603602081101561113f57600080fd5b5035613564565b61054061359f565b6105646135ae565b6105366004803603602081101561116c57600080fd5b50356001600160a01b03166135b4565b6105366004803603602081101561119257600080fd5b50356001600160a01b031661366c565b610536600480360360208110156111b857600080fd5b503561378d565b610536600480360360208110156111d557600080fd5b50356137c8565b3360009081526001602052604090205460ff16806112095750336111fe612b4b565b6001600160a01b0316145b61121257600080fd5b601455565b6003546001600160a01b031681565b60195490565b6000818152601b60209081526040808320338452909152812060038101541561125c576003015443039050611265565b60040154430390505b919050565b60165481565b6002805414156112c7576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600280819055506000601984815481106112dd57fe5b60009182526020808320878452601b82526040808520338087529084528186206001600160a01b0389168752601c90945281862090865294208254600490940290910194509092918611156113635760405162461bcd60e51b81526004018080602001828103825260218152602001806140fc6021913960400191505060405180910390fd5b6001600160a01b038516156113965733600090815260018301602052604090208054879003905560038201805487900390555b805486900381556113a687611fff565b6113af876138bd565b85156118d45782546113c19087613b74565b83556003830154156113de576003830154430360058401556113eb565b6004830154430360058401555b600c6000815481106113f957fe5b9060005260206000200154836005015414806114185750826006015443145b1561149757611469336114576064611451600e60008154811061143757fe5b90600052602060002001548b61380390919063ffffffff16565b90613bd1565b86546001600160a01b03169190613c38565b600554600f8054611492926001600160a01b031691611457916064916114519160009061143757fe5b611876565b600c6001815481106114a557fe5b90600052602060002001548360050154101580156114df5750600d6000815481106114cc57fe5b9060005260206000200154836005015411155b15611529576114fe336114576064611451600e60018154811061143757fe5b600554600f8054611492926001600160a01b0316916114579160649161145191600190811061143757fe5b600c60028154811061153757fe5b90600052602060002001548360050154101580156115715750600d60018154811061155e57fe5b9060005260206000200154836005015411155b156115bb57611590336114576064611451600e60028154811061143757fe5b600554600f8054611492926001600160a01b0316916114579160649161145191600290811061143757fe5b600c6003815481106115c957fe5b90600052602060002001548360050154101580156116035750600d6002815481106115f057fe5b9060005260206000200154836005015411155b1561164d57611622336114576064611451600e60038154811061143757fe5b600554600f8054611492926001600160a01b0316916114579160649161145191600390811061143757fe5b600c60048154811061165b57fe5b90600052602060002001548360050154101580156116955750600d60038154811061168257fe5b9060005260206000200154836005015411155b156116df576116b4336114576064611451600e60048154811061143757fe5b600554600f8054611492926001600160a01b0316916114579160649161145191600490811061143757fe5b600c6005815481106116ed57fe5b90600052602060002001548360050154101580156117275750600d60048154811061171457fe5b9060005260206000200154836005015411155b1561177757611747336114576103e8611451600e60058154811061143757fe5b611492600560009054906101000a90046001600160a01b03166114576103e8611451600f60058154811061143757fe5b600c60068154811061178557fe5b90600052602060002001548360050154101580156117bf5750600d6005815481106117ac57fe5b9060005260206000200154836005015411155b1561180b576117df33611457612710611451600e60068154811061143757fe5b600554600f8054611492926001600160a01b031691611457916127109161145191600690811061143757fe5b600c60078154811061181957fe5b9060005260206000200154836005015411156118765761184a33611457612710611451600e60078154811061143757fe5b600554600f8054611876926001600160a01b031691611457916127109161145191600790811061143757fe5b600384015483546118919164e8d4a510009161145191613803565b6001840155604080518781529051889133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a34360038401555b505060016002555050505050565b601981815481106118ef57fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b601e5481565b6000806119396001430343612b5a565b9050826119565760095461194e908290613803565b915050611265565b61194e601e546114516019600187038154811061196f57fe5b9060005260206000209060040201600101546119966009548661380390919063ffffffff16565b90613803565b6119a4613cb8565b6001600160a01b03166119b5612b4b565b6001600160a01b031614611a10576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0382166000908152601d6020526040902054829060ff1615611a6a5760405162461bcd60e51b81526004018080602001828103825260288152602001806141646028913960400191505060405180910390fd5b6001600160a01b0383166000908152601a602052604090205415611abf5760405162461bcd60e51b81526004018080602001828103825260298152602001806140d36029913960400191505060405180910390fd5b8115611acd57611acd6127dd565b60006013544311611ae057601354611ae2565b435b601e54909150611af29086613863565b601e55601980546001600160a01b039586166000818152601a6020908152604080832060019586019055601d8252808320805460ff1916861790558051608081018252938452908301998a5282019485526060820181815284549384018555939052517f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96956004909202918201805473ffffffffffffffffffffffffffffffffffffffff1916919097161790955594517f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9696850155517f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9697840155505090517f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c969890910155565b6006546001600160a01b031681565b3360009081526001602052604090205460ff1680611c51575033611c46612b4b565b6001600160a01b0316145b611c5a57600080fd5b601055565b3360009081526001602052604090205460ff1680611c8c575033611c81612b4b565b6001600160a01b0316145b611c9557600080fd5b601355565b3360009081526001602052604090205460ff1680611cc7575033611cbc612b4b565b6001600160a01b0316145b611cd057600080fd5b8051611ce390600e90602084019061402b565b5050565b600a8181548110611cf457fe5b600091825260209091200154905081565b3360009081526001602052604090205460ff1680611d32575033611d27612b4b565b6001600160a01b0316145b611d3b57600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081526001602052604090205460ff1680611d97575033611d8c612b4b565b6001600160a01b0316145b611da057600080fd5b8051611ce390600b90602084019061402b565b6000611dbd614076565b50506001600160a01b03166000908152601c6020908152604091829020825160608101845281548152600282015492810183905260039091015492019190915290565b60135481565b6007546001600160a01b031681565b3360009081526001602052604090205460ff1680611e42575033611e37612b4b565b6001600160a01b0316145b611e4b57600080fd5b600955565b600b8181548110611cf457fe5b3360009081526001602052604090205460ff1680611e8a575033611e7f612b4b565b6001600160a01b0316145b611e9357600080fd5b8051611ce390600a90602084019061402b565b611eae613cb8565b6001600160a01b0316611ebf612b4b565b6001600160a01b031614611f1a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116331415611f3057600080fd5b6001600160a01b03166000908152600160205260409020805460ff19169055565b3360009081526001602052604090205460ff1680611f7e575033611f73612b4b565b6001600160a01b0316145b611f8757600080fd5b8051611ce390600d90602084019061402b565b3360009081526001602052604090205460ff1680611fc7575033611fbc612b4b565b6001600160a01b0316145b611fd057600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006019828154811061200e57fe5b906000526020600020906004020190508060020154431161202f57506125a4565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561207957600080fd5b505afa15801561208d573d6000803e3d6000fd5b505050506040513d60208110156120a357600080fd5b50519050806120b95750436002909101556125a4565b60008060008060006120d4876002015443896001015461323e565b600354604080516340c10f1960e01b8152306004820152602481018790529051969b5094995092975090955093506001600160a01b0316916340c10f199160448082019260009290919082900301818387803b15801561213357600080fd5b505af1158015612147573d6000803e3d6000fd5b5050505061217561216a8761145164e8d4a510008861380390919063ffffffff16565b600389015490613863565b6003880155436002880155841561228757600354600554604080516340c10f1960e01b81526001600160a01b03928316600482015260248101899052905191909216916340c10f1991604480830192600092919082900301818387803b1580156121de57600080fd5b505af11580156121f2573d6000803e3d6000fd5b505050506010544311612287576003546005546001600160a01b039182169163282d3fdf911661222860646114518a604b613803565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561226e57600080fd5b505af1158015612282573d6000803e3d6000fd5b505050505b821561238e57600354600654604080516340c10f1960e01b81526001600160a01b03928316600482015260248101879052905191909216916340c10f1991604480830192600092919082900301818387803b1580156122e557600080fd5b505af11580156122f9573d6000803e3d6000fd5b50505050601054431161238e576003546006546001600160a01b039182169163282d3fdf911661232f606461145188602d613803565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561237557600080fd5b505af1158015612389573d6000803e3d6000fd5b505050505b811561249557600354600754604080516340c10f1960e01b81526001600160a01b03928316600482015260248101869052905191909216916340c10f1991604480830192600092919082900301818387803b1580156123ec57600080fd5b505af1158015612400573d6000803e3d6000fd5b505050506010544311612495576003546007546001600160a01b039182169163282d3fdf91166124366064611451876055613803565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561247c57600080fd5b505af1158015612490573d6000803e3d6000fd5b505050505b801561259c57600354600854604080516340c10f1960e01b81526001600160a01b03928316600482015260248101859052905191909216916340c10f1991604480830192600092919082900301818387803b1580156124f357600080fd5b505af1158015612507573d6000803e3d6000fd5b50505050601054431161259c576003546008546001600160a01b039182169163282d3fdf911661253d606461145186605f613803565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561258357600080fd5b505af1158015612597573d6000803e3d6000fd5b505050505b505050505050505b50565b6002805414156125fe576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002808190555060006019828154811061261457fe5b60009182526020808320858452601b8252604080852033865290925290832080546004909302909101935091906126539060649061145190604b613803565b9050600061267460646114516019866000015461380390919063ffffffff16565b600080855560018501558454909150612697906001600160a01b03163384613c38565b60055484546126b3916001600160a01b03918216911683613c38565b604080518381529051869133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350506001600255505050565b6000612700614076565b50506001600160a01b03166000908152601c602090815260409182902082516060810184528154815260028201549281019290925260030154910181905290565b60005b8151811015611ce35761276982828151811061275c57fe5b6020026020010151613114565b600101612744565b3360009081526001602052604090205460ff168061279e575033612793612b4b565b6001600160a01b0316145b6127a757600080fd5b6000928352601b602090815260408085206001600160a01b039094168552929052912060030155565b600c8181548110611cf457fe5b60195460005b81811015611ce3576127f481611fff565b6001016127e3565b612804613cb8565b6001600160a01b0316612815612b4b565b6001600160a01b031614612870576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b801561287e5761287e6127dd565b6128bb826128b56019868154811061289257fe5b906000526020600020906004020160010154601e54613b7490919063ffffffff16565b90613863565b601e8190555081601984815481106128cf57fe5b906000526020600020906004020160010181905550505050565b6128f1613cb8565b6001600160a01b0316612902612b4b565b6001600160a01b03161461295d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b3360009081526001602052604090205460ff16806129e15750336129d6612b4b565b6001600160a01b0316145b6129ea57600080fd5b601155565b3360009081526001602052604090205460ff1680612a1c575033612a11612b4b565b6001600160a01b0316145b612a2557600080fd5b6000928352601b602090815260408085206001600160a01b039094168552929052912060040155565b60115481565b3360009081526001602052604090205460ff1680612a81575033612a76612b4b565b6001600160a01b0316145b612a8a57600080fd5b8051611ce390600c90602084019061402b565b3360009081526001602052604090205460ff1680612aca575033612abf612b4b565b6001600160a01b0316145b612ad357600080fd5b8051611ce390600f90602084019061402b565b3360009081526001602052604090205460ff1680612b13575033612b08612b4b565b6001600160a01b0316145b612b1c57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b6013546000908190841015612b73576000915050612c50565b60005b600b54811015612c4c576000600b8281548110612b8f57fe5b906000526020600020015490506001600a8054905003821115612bb85760009350505050612c50565b808511612bfe576000612be7600a8481548110612bd157fe5b600091825260209091200154611996888a613b74565b9050612bf38482613863565b945050505050612c50565b80861015612c43576000612c2e600a8481548110612c1857fe5b600091825260209091200154611996848a613b74565b91965086919050612c3f8482613863565b9350505b50600101612b76565b5090505b92915050565b600280541415612cad576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805581612ced5760405162461bcd60e51b815260040180806020018281038252603581526020018061418c6035913960400191505060405180910390fd5b600060198481548110612cfc57fe5b60009182526020808320878452601b82526040808520338087529084528186206005546001600160a01b039081168852838820908a168852601c865283882092885283882060018401909652929096205460049590950290920195509290919015612d8757336000908152600183016020526040902080548801905560038201805488019055612db6565b336000908152600180840160205260409091208054890190556002830180549091019055600382018054880190555b612dd060646114516011548a61380390919063ffffffff16565b8154018155612dde88611fff565b612de7886138bd565b8454612dfe906001600160a01b031633308a613cbc565b8354612e0b574360028501555b612e3b612e33612e2c6127106114516011548c61380390919063ffffffff16565b8990613b74565b855490613863565b8085556003860154612e589164e8d4a51000916114519190613803565b8460010181905550612e89612e81612e2c6127106114516012548c61380390919063ffffffff16565b845490613863565b8084556003860154612ea69164e8d4a51000916114519190613803565b6001840155604080518881529051899133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3600484015415612ef157612ef8565b4360048501555b50504360069092019190915550506001600255505050565b6000612f1a614076565b50506001600160a01b03166000908152601c60209081526040918290208251606081018452815480825260028301549382019390935260039091015492019190915290565b601b602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020154908060030154908060040154908060050154908060060154905087565b60145481565b60095481565b60105481565b60008060198481548110612fd057fe5b60009182526020808320878452601b825260408085206001600160a01b03898116875290845281862060049586029093016003810154815484516370a0823160e01b81523098810198909852935191985093969395939492909116926370a08231926024808301939192829003018186803b15801561304e57600080fd5b505afa158015613062573d6000803e3d6000fd5b505050506040513d602081101561307857600080fd5b50516002850154909150431180156130905750600081115b156130d55760006130aa856002015443876001015461323e565b509193506130d192506130ca91508490506114518464e8d4a51000613803565b8490613863565b9250505b61310383600101546130fd64e8d4a5100061145186886000015461380390919063ffffffff16565b90613b74565b979650505050505050565b60175481565b61311d81611fff565b6125a4816138bd565b3360009081526001602052604090205460ff1680613153575033613148612b4b565b6001600160a01b0316145b61315c57600080fd5b601555565b60016020526000908152604090205460ff1681565b600f8181548110611cf457fe5b60125481565b3360009081526001602052604090205460ff16806131b65750336131ab612b4b565b6001600160a01b0316145b6131bf57600080fd5b601755565b60185481565b3360009081526001602052604090205460ff16806131f75750336131ec612b4b565b6001600160a01b0316145b61320057600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b6000806000806000806132518989612b5a565b90506000613274601e546114518a6119966009548761380390919063ffffffff16565b90506000613385600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156132c957600080fd5b505afa1580156132dd573d6000803e3d6000fd5b505050506040513d60208110156132f357600080fd5b5051600354604080517f355274ea00000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163355274ea91600480820192602092909190829003018186803b15801561335357600080fd5b505afa158015613367573d6000803e3d6000fd5b505050506040513d602081101561337d57600080fd5b505190613b74565b9050818110156133a7576000975080965060009550600094506000935061341b565b6133c160646114516015548561380390919063ffffffff16565b97508196506133e060646114516016548561380390919063ffffffff16565b95506133fc60646114516017548561380390919063ffffffff16565b945061341860646114516018548561380390919063ffffffff16565b93505b505050939792965093509350565b600d8181548110611cf457fe5b601d6020526000908152604090205460ff1681565b601a6020526000908152604090205481565b613465613cb8565b6001600160a01b0316613476612b4b565b6001600160a01b0316146134d1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b600e8181548110611cf457fe5b6005546001600160a01b031681565b601c6020526000908152604090208054600282015460039092015490919083565b6001600160a01b039182166000908152601c602090815260408083209390941682526001909201909152205490565b3360009081526001602052604090205460ff1680613591575033613586612b4b565b6001600160a01b0316145b61359a57600080fd5b601855565b6008546001600160a01b031681565b60155481565b3360009081526001602052604090205460ff16806135e15750336135d6612b4b565b6001600160a01b0316145b6135ea57600080fd5b600354604080517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529151919092169163f2fde38b91602480830192600092919082900301818387803b15801561365157600080fd5b505af1158015613665573d6000803e3d6000fd5b5050505050565b613674613cb8565b6001600160a01b0316613685612b4b565b6001600160a01b0316146136e0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166137255760405162461bcd60e51b81526004018080602001828103825260268152602001806140ad6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081526001602052604090205460ff16806137ba5750336137af612b4b565b6001600160a01b0316145b6137c357600080fd5b601655565b3360009081526001602052604090205460ff16806137f55750336137ea612b4b565b6001600160a01b0316145b6137fe57600080fd5b601255565b60008261381257506000612c50565b8282028284828161381f57fe5b041461385c5760405162461bcd60e51b81526004018080602001828103825260218152602001806141436021913960400191505060405180910390fd5b9392505050565b60008282018381101561385c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000601982815481106138cc57fe5b60009182526020808320858452601b82526040808520338652909252922080546004909202909201925015613b6f57600061392982600101546130fd64e8d4a510006114518760030154876000015461380390919063ffffffff16565b600354604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561397a57600080fd5b505afa15801561398e573d6000803e3d6000fd5b505050506040513d60208110156139a457600080fd5b50519050808211156139b4578091505b8115613b4c57600354604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810185905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015613a2757600080fd5b505af1158015613a3b573d6000803e3d6000fd5b505050506040513d6020811015613a5157600080fd5b5050601054600284015460009110613b0557613a7d60646114516014548661380390919063ffffffff16565b600354604080517f282d3fdf0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290519293506001600160a01b039091169163282d3fdf9160448082019260009290919082900301818387803b158015613aec57600080fd5b505af1158015613b00573d6000803e3d6000fd5b505050505b43600285015560408051848152602081018390528151889233927f3887f2857beaaf367eb618dfb5e22c1ebd74425affb0602c2e9fe126e3f860eb929081900390910190a3505b60038401548354613b679164e8d4a510009161145191613803565b600184015550505b505050565b600082821115613bcb576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000808211613c27576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613c3057fe5b049392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052613b6f908490613d4a565b3390565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052613d44908590613d4a565b50505050565b6060613d9f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613dfb9092919063ffffffff16565b805190915015613b6f57808060200190516020811015613dbe57600080fd5b5051613b6f5760405162461bcd60e51b815260040180806020018281038252602a8152602001806141c1602a913960400191505060405180910390fd5b6060613e0a8484600085613e12565b949350505050565b606082471015613e535760405162461bcd60e51b815260040180806020018281038252602681526020018061411d6026913960400191505060405180910390fd5b613e5c85613f81565b613ead576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310613f0a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613ecd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613f6c576040519150601f19603f3d011682016040523d82523d6000602084013e613f71565b606091505b5091509150613103828286613f87565b3b151590565b60608315613f9657508161385c565b825115613fa65782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613ff0578181015183820152602001613fd8565b50505050905090810190601f16801561401d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215614066579160200282015b8281111561406657825182559160200191906001019061404b565b50614072929150614097565b5090565b60405180606001604052806000815260200160008152602001600081525090565b5b80821115614072576000815560010161409856fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734d6173746572427265656465723a3a6164643a206c7020697320616c726561647920696e20706f6f6c4d6173746572427265656465723a3a77697468647261773a206e6f7420676f6f64416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d6173746572427265656465723a3a6e6f6e4475706c6963617465643a206475706c6963617465644d6173746572427265656465723a3a6465706f7369743a20616d6f756e74206d7573742062652067726561746572207468616e20305361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220973a2b5a5e967b69172642397d91dc7925e017d1761e3f6f13a5ab55494dc43164736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2398,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4509,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "authorized",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4471,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6361,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "govToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(GovernanceToken)5785"
      },
      {
        "astId": 6363,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "usdOracle",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6365,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "devaddr",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 6367,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "liquidityaddr",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 6369,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "comfundaddr",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 6371,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "founderaddr",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 6373,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "REWARD_PER_BLOCK",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 6376,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "REWARD_MULTIPLIER",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6379,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "HALVING_AT_BLOCK",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6382,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "blockDeltaStartStage",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6385,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "blockDeltaEndStage",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6388,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "userFeeStage",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6391,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "devFeeStage",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6393,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "FINISH_BONUS_AT_BLOCK",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 6395,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "userDepFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 6397,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "devDepFee",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 6399,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "START_BLOCK",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 6401,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "PERCENT_LOCK_BONUS_REWARD",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 6403,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "PERCENT_FOR_DEV",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 6405,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "PERCENT_FOR_LP",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 6407,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "PERCENT_FOR_COM",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 6409,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "PERCENT_FOR_FOUNDERS",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 6412,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "poolInfo",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_struct(PoolInfo)6359_storage)dyn_storage"
      },
      {
        "astId": 6416,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "poolId1",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6422,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "userInfo",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6339_storage))"
      },
      {
        "astId": 6426,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "userGlobalInfo",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_struct(UserGlobalInfo)6350_storage)"
      },
      {
        "astId": 6430,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "poolExistence",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_contract(IERC20)3436,t_bool)"
      },
      {
        "astId": 6433,
        "contract": "src/main/MasterBreeder.sol:MasterBreeder",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)6359_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)6359_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterBreeder.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GovernanceToken)5785": {
        "encoding": "inplace",
        "label": "contract GovernanceToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3436": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserGlobalInfo)6350_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterBreeder.UserGlobalInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserGlobalInfo)6350_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)6339_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterBreeder.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)6339_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)3436,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)3436",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6339_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MasterBreeder.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)6339_storage)"
      },
      "t_struct(PoolInfo)6359_storage": {
        "encoding": "inplace",
        "label": "struct MasterBreeder.PoolInfo",
        "members": [
          {
            "astId": 6352,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)3436"
          },
          {
            "astId": 6354,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6356,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6358,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "accGovTokenPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserGlobalInfo)6350_storage": {
        "encoding": "inplace",
        "label": "struct MasterBreeder.UserGlobalInfo",
        "members": [
          {
            "astId": 6341,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "globalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6345,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "referrals",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 6347,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "totalReferals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6349,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "globalRefAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)6339_storage": {
        "encoding": "inplace",
        "label": "struct MasterBreeder.UserInfo",
        "members": [
          {
            "astId": 6326,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6328,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6330,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "rewardDebtAtBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6332,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "lastWithdrawBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6334,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "firstDepositBlock",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6336,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "blockdelta",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6338,
            "contract": "src/main/MasterBreeder.sol:MasterBreeder",
            "label": "lastDepositBlock",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}